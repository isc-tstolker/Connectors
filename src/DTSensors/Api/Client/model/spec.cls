Class DTSensors.Api.Client.model.spec Extends %RegisteredObject [ ProcedureBlock ]
{

XData OpenAPI [ MimeType = application/json ]
{
{
  "openapi":"3.0.0",
  "info":{
    "title":"Disruptive Technologies REST API",
    "description":"This REST API provides access to management, configuration and access to streams of data from \nDisruptive Technologies' sensor solutions.\n",
    "termsOfService":"https://identity.disruptive-technologies.com/account/terms-of-service/",
    "contact":{
      "name":"Support",
      "url":"https://support.disruptive-technologies.com"
    },
    "version":"v2"
  },
  "externalDocs":{
    "description":"Developer documentation, guides, and examples.",
    "url":"https://developer.disruptive-technologies.com/docs"
  },
  "servers":[
    {
      "url":"https://api.disruptive-technologies.com/v2"
    }
  ],
  "security":[
    {
      "UserLogin":[
      ]
    },
    {
      "ServiceAccountLogin":[
      ]
    }
  ],
  "paths":{
    "/projects/{project}/devices":{
      "get":{
        "tags":[
          "Devices & Labels"
        ],
        "summary":"List Sensors and Cloud Connectors",
        "description":"Gets a list of all the Sensors and Cloud Connectors in the specified Project (including Emulated Devices).\n\nSee the [Devices](https://developer.disruptive-technologies.com/docs/concepts/devices) page in the Developer Docs\nfor more details about each type of Device, and which [Events](https://developer.disruptive-technologies.com/docs/concepts/events) \nthey can send.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/DeviceIDList"
          },
          {
            "$ref":"#/components/parameters/DeviceTypeFilter"
          },
          {
            "$ref":"#/components/parameters/LabelFilter"
          },
          {
            "name":"orderBy",
            "in":"query",
            "description":"The field name you want to sort the devices by.\n\nFields are referred to using dot notation (eg. `reported.temperature.value`). The default order is ascending. \nTo list the Devices in descending order, prefix the field name with a dash (`-`).\n\nHere are some examples: \n* `-reported.networkStatus.updateTime`: Show the Devices that have sent a heartbeat the most recently first.\n* `labels.name`: Show the Devices in alphabetical order by their display name.\n* `-reported.networkStatus.signalStrength`: Show the Devices with the best signal strength first.\n\nHere's the complete list of all the fields that can be used for sorting:\n* `type`\n* `labels.name`\n* `productNumber`\n* `reported.networkStatus.signalStrength`\n* `reported.networkStatus.updateTime`\n* `reported.batteryStatus.percentage`\n* `reported.batteryStatus.updateTime`\n* `reported.objectPresent.updateTime`\n* `reported.touch.updateTime`\n* `reported.temperature.value`\n* `reported.temperature.updateTime`\n* `reported.connectionStatus.updateTime`\n* `reported.connectionLatency.updateTime`\n* `reported.ethernetStatus.updateTime`\n* `reported.cellularStatus.updateTime`\n* `reported.objectPresentCount.updateTime`\n* `reported.touchCount.updateTime`\n* `reported.humidity.updateTime`\n* `reported.humidity.value`\n* `reported.waterPresent.updateTime`\n* `reported.motion.updateTime`\n* `reported.contact.updateTime`\n* `reported.probeWireStatus.updateTime`\n* `reported.deskOccupancy.updateTime`\n* `reported.co2.updateTime`\n* `reported.co2.ppm`\n* `reported.pressure.updateTime`\n* `reported.pressure.pascal`\n",
            "required":false,
            "style":"form",
            "explode":true,
            "schema":{
              "type":"string"
            }
          },
          {
            "$ref":"#/components/parameters/ListDevicesQuery"
          },
          {
            "$ref":"#/components/parameters/ProductNumberFilter"
          },
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"List of Sensors and Cloud Connectors\n\nA Device object has the following fields:\n| Field           | Description |\n| ----------      | ----------- |\n| `name`          | The resource name of the Device. Has the format `projects/{project_id}/devices/{device_id}`. |\n| `type`          | The type of Device this is. See the [Devices](https://developer.disruptive-technologies.com/docs/concepts/devices) page in the Developer Docs for full details. |\n| `labels`        | The current Device Labels. |\n| `reported`      | Contains the last Event of each event type received for this Device. See the [Events](https://developer.disruptive-technologies.com/docs/concepts/events) page in the Developer Docs for full details.|\n| `productNumber` | The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors). | \n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200"
                },
                "example":{
                  "devices":[
                    {
                      "name":"projects/b7s3umd0fee000ba5di0/devices/b5rj9ed7rihk942p48og",
                      "type":"temperature",
                      "labels":{
                      },
                      "reported":{
                        "networkStatus":{
                          "signalStrength":54,
                          "rssi":-78,
                          "updateTime":"2021-03-03T08:04:30.373046Z",
                          "cloudConnectors":[
                            {
                              "id":"b6ikc59j7hk6k6kvls9g",
                              "signalStrength":54,
                              "rssi":-78
                            }
                          ],
                          "transmissionMode":"LOW_POWER_STANDARD_MODE"
                        },
                        "batteryStatus":{
                          "percentage":100,
                          "updateTime":"2021-03-03T01:05:59.613389Z"
                        },
                        "temperature":{
                          "value":23.400002,
                          "updateTime":"2021-03-03T08:04:30.373046Z"
                        }
                      },
                      "productNumber":"102058"
                    },
                    {
                      "name":"projects/b7s3umd0fee000ba5di0/devices/b6sfprl7rihg0dm4upig",
                      "type":"temperature",
                      "labels":{
                        "kit":"monster-cat-reliable",
                        "locationId":"132.1545.4534",
                        "maintenance-schedule":"Mon Tue Wed 07-16"
                      },
                      "reported":{
                        "networkStatus":{
                          "signalStrength":36,
                          "rssi":-88,
                          "updateTime":"2021-03-03T08:06:44.124176Z",
                          "cloudConnectors":[
                            {
                              "id":"b6vqooeor270gf7m4nlg",
                              "signalStrength":36,
                              "rssi":-88
                            }
                          ],
                          "transmissionMode":"LOW_POWER_STANDARD_MODE"
                        },
                        "batteryStatus":{
                          "percentage":100,
                          "updateTime":"2021-03-03T07:33:54.008502Z"
                        },
                        "temperature":{
                          "value":20.800003,
                          "updateTime":"2021-03-03T08:06:44.124176Z"
                        }
                      },
                      "productNumber":"102058"
                    }
                  ],
                  "nextPageToken":"c0vbqgecie6o420uqfpg"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/devices:batchUpdate":{
      "post":{
        "tags":[
          "Devices & Labels"
        ],
        "summary":"Update Multiple Labels on Multiple Devices",
        "description":"Add, update, or remove labels on multiple devices in one request.\n\n## Device display name and description\nThe `name` and `description` Device Labels are considered the display name and description of the \nDevice, and are used in different parts of the user interface in DT Studio.\n\nIt is recommended that REST API implementations use these two labels for the same purpose as \nDT Studio for a seamless integration.\n\n## Upserting\nUsing `addLabels`, this endpoint will add a label if it doesn't exist, and update that label \nif it does exists. \n\nWhen you know you want to set a label to a certain value, whether it exists or not, this saves \nyou from first checking if the label exist and then choose `POST` or `PATCH`.\n\n## Limitations\n* A maximum of 50 Device Labels (including key and value) are allowed.\n* A Label key can have a maximum of 127 characters, while a Label value can have a maximum of \n255 characters.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/project_devicesbatchUpdate_body"
              },
              "example":{
                "devices":[
                  "projects/<source_project_id>/devices/<device_id_1>",
                  "projects/<source_project_id>/devices/<device_id_2>",
                  "projects/<source_project_id>/devices/<device_id_3>"
                ],
                "addLabels":{
                  "newLabelKey":"label value",
                  "existingLabelKey":"new label value"
                },
                "removeLabels":[
                  "label-to-be-removed"
                ]
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Batch update response. \n\nNote that a status code of `200` doesn't necessarily mean that all the Labels were \nsuccessfully updated. Check if the `batchErrors` array is empty to make sure that \nall the requested changes were successful.\n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_1"
                },
                "example":{
                  "batchErrors":[
                    {
                      "device":"/projects/<source_project_id>/devices/<device_id_1>",
                      "status":{
                        "code":"INVALID_ARGUMENT",
                        "message":"Max labels reached for device."
                      }
                    },
                    {
                      "device":"/projects/<source_project_id>/devices/<device_id_2>",
                      "status":{
                        "code":"INTERNAL_ERROR",
                        "message":"Operation timed out. Retry again in a few seconds."
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/devices/{device}":{
      "get":{
        "tags":[
          "Devices & Labels"
        ],
        "summary":"Get a Single Device",
        "description":"Gets the current state of a single Device.\n\nSee the [Devices](https://developer.disruptive-technologies.com/docs/concepts/devices) page in the \nDeveloper Docs for more details about each type of Device, and which \n[Events](https://developer.disruptive-technologies.com/docs/concepts/events) they can send.\n\n## Device lookup\nIf you don't know which Project a Device is in, you can use '-' as a wildcard for the Project\nidentifier part of the path. For example, `GET /projects/-/devices/abc` will return the\ndetails for a Device with the identifier `abc`. The identifier of the Device's Project\nis included in the `name` field of the response, so you can use that to lookup the Project if\nyou need to.\n\nThis feature can be useful if you're scanning the QR code on a sensor (which contains the Device\nidentifier) and want to lookup it's last reported Events.\n",
        "responses":{
          "200":{
            "description":"A Device object has the following fields:\n| Field           | Description |\n| ----------      | ----------- |\n| `name`          | The resource name of the Device. Has the format `projects/{project_id}/devices/{device_id}`. |\n| `type`          | The type of Device this is. See the [Devices](https://developer.disruptive-technologies.com/docs/concepts/devices) page in the Developer Docs for full details. |\n| `labels`        | The current Device Labels. |\n| `reported`      | Contains the last Event of each event type received for this Device. See the [Events](https://developer.disruptive-technologies.com/docs/concepts/events) page in the Developer Docs for full details.|\n| `productNumber` | The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors). | \n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Device"
                },
                "example":{
                  "name":"projects/b5ivst37ritirv2aidsl/device/b5ivst57rihirv3aidsg",
                  "type":"proximity",
                  "labels":{
                    "door":"23.32.54A",
                    "installed":"PLANNED"
                  },
                  "reported":{
                    "networkStatus":{
                      "signalStrength":56,
                      "rssi":-76,
                      "updateTime":"2021-03-03T10:06:26.557540Z",
                      "cloudConnectors":[
                        {
                          "id":"b6ikc59j7hk6k6kvls40",
                          "signalStrength":56,
                          "rssi":-76
                        }
                      ],
                      "transmissionMode":"LOW_POWER_STANDARD_MODE"
                    },
                    "batteryStatus":{
                      "percentage":100,
                      "updateTime":"2021-03-03T01:40:36.894180Z"
                    },
                    "objectPresent":{
                      "state":"NOT_PRESENT",
                      "updateTime":"2021-03-03T10:06:26.557540Z"
                    }
                  },
                  "productNumber":"100117"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectIDWithWildcard"
        },
        {
          "$ref":"#/components/parameters/DeviceID"
        }
      ]
    },
    "/projects/{project}/devices/{device}/events":{
      "get":{
        "tags":[
          "Event History"
        ],
        "summary":"List Historical Device Events",
        "description":"Gets a list of historical events for a Device. The Events can be filtered based\non both the event types, as well as the time range.\n\nSee the Developer Docs to learn more about the different types of \n[Events](https://developer.disruptive-technologies.com/docs/concepts/events) that are available. \nAn example of how to do pagination is also available \n[here](https://developer.disruptive-technologies.com/docs/examples/pagination).\n\n## Time range\nThe `startTime` and `endTime` query parameters can be used to specify the time range to get \nevents for, and can be fetched as far back as 31 days ago. If the parameters are not specified, \nevents for the past 24 hours will be returned.\n\nThe `startTime` parameter will be rounded down to the nearest second (backwards in time), and **will**\ninclude events on this exact timestamp. The `endTime` parameter will be rounded up to the \nnearest second (forwards in time), and **will not** include events on this exact timestamp \n(only older events).\n\nDescribed as a formula, the included events will be in the following time range: \n\n`floor(startTime) <= event.timestamp < ceil(endTime)`\n\n## Indexing delay\nThere is a delay from when an event is received by our servers until they are indexed and \navailable via this endpoint. This is typically 1-2 seconds, but can be up to 10 seconds.\n\nThis means that an event can arrive with very low latency via a Data Connector or the `:stream` \nAPI, but still not yet be available on this endpoint until up to 10 seconds later.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/EventTypeFilter"
          },
          {
            "$ref":"#/components/parameters/StartTime"
          },
          {
            "$ref":"#/components/parameters/EndTime"
          },
          {
            "$ref":"#/components/parameters/EventPageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"List of events from the given time range, or the last 24 hours if no time range was given.\n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_2"
                },
                "example":{
                  "events":[
                    {
                      "eventId":"b8n5h8glapig00adhh6g",
                      "targetName":"projects/29/devices/b5ivst57rihirv3aidsg",
                      "eventType":"objectPresent",
                      "data":{
                        "objectPresent":{
                          "state":"NOT_PRESENT",
                          "updateTime":"2021-03-03T10:06:26.557540Z"
                        }
                      },
                      "timestamp":"2021-03-03T10:06:26.557540Z"
                    },
                    {
                      "eventId":"b8n5h944maeg00fv2pm0",
                      "targetName":"projects/29/devices/b5ivst57rihirv3aidsg",
                      "eventType":"networkStatus",
                      "data":{
                        "networkStatus":{
                          "signalStrength":56,
                          "rssi":-76,
                          "updateTime":"2021-03-03T10:06:26.557540Z",
                          "cloudConnectors":[
                            {
                              "id":"b6ikc59j7hk6k6kvls40",
                              "signalStrength":56,
                              "rssi":-76
                            }
                          ],
                          "transmissionMode":"LOW_POWER_STANDARD_MODE"
                        }
                      },
                      "timestamp":"2021-03-03T10:06:26.557540Z"
                    }
                  ],
                  "nextPageToken":"c0vcl8ucie6oct320fjg"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/DeviceID"
        }
      ]
    },
    "/projects/{project}/devices/{device}:stream":{
      "get":{
        "tags":[
          "Live Events Streaming API"
        ],
        "summary":"Stream Events From a Single Device",
        "description":"Sets up a subscription to real-time Events from a single Device. Which Events are included can be configured\nusing the available query parameters. \n\nSee the [Streaming Events](https://developer.disruptive-technologies.com/docs/examples/streaming-events)\nguide in the Developer Docs for more details about how to set up an event stream.\n\n## Content types\nThe `:stream` endpoints supports two different formats for the received events: `text/event-stream` and `application/json`.\nThe format is selected using the `Accept` header, and defaults to `application/json` if the header is not set.\n\nThe difference between the two is that `text/event-stream` is a Server-Sent Events specific format, and will be used by default\nby any Server-Sent Events library. The `application/json` format will return one `JSON` object for each event separated by line\nbreaks, and can be easier to work with if you're not using a Server-Sent Events library.\n\n# Comparison to Data Connectors\nFor scalable and reliable server-to-server integrations, it is recommended to used Data Connectors instead of Server-Sent Events\nstreams. See the [Data Connector](https://developer.disruptive-technologies.com/docs/data-connectors/introduction-to-data-connector) \narticles on the developer website for more details.\n\nThe `:stream` API is only recommended when end-clients, such as web-apps or phone-apps, have direct access to the API for \nsetting up temporary streams. It can also be used for rapid development, proof-of-concept, or non-critical low-volume \nserver integrations.\n\nThe `:stream` have no means of automatically resuming the event stream if disconnected. If it is critical that you never \nlose an event, use Data Connectors instead.\n\n## Limitations\t\nAt most 50 active `:stream` connections per Service Account.\n\n## Server sent events\nThis call will subscribe to Server Sent Events (SSE) for all the Devices selected by query parameters.\n\nTo learn more about SSE, see the following resources: \n* [MDN Web Docs: Using server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events)\n* [MDN Web Docs: EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource)\n* [javascript.info: Server Sent Events](https://javascript.info/server-sent-events)\n* [HTML Living Standard: Server-sent events](https://html.spec.whatwg.org/multipage/server-sent-events.html)\n\n**Note:** This interactive documentation does not support streaming events. To test it, press `Try it out`, fill in \nthe query parameters, press `Send Request`, and use the generated `curl` command in your Terminal instead.\n\n## Authentication\nSome Server Sent Events libraries (namely JavaScript's `EventSource`) does not have the option to set HTTP headers.\n\nIn these cases, it's recommended to send the access token as a query parameter `?token=ACCESS_TOKEN`.\n\nSee the [Authentication article](https://developer.disruptive-technologies.com/docs/authentication/oauth2) to \nlearn more about how to acquire this token.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/AuthToken"
          },
          {
            "$ref":"#/components/parameters/EventTypeFilter"
          }
        ],
        "responses":{
          "200":{
            "description":"Device Event Stream Established",
            "content":{
              "text/event-stream":{
                "schema":{
                  "$ref":"#/components/schemas/StreamEvent"
                },
                "example":{
                  "result":{
                    "event":{
                      "eventId":"b8n5tttql4pg00bh8td0",
                      "targetName":"projects/b7s3e550fee000ba5dhg/devices/b6sfpsd7rihg0dm4ust0",
                      "eventType":"touch",
                      "data":{
                        "touch":{
                          "updateTime":"2021-03-03T10:33:27.668452Z"
                        }
                      },
                      "timestamp":"2021-03-03T10:33:27.668452Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/DeviceID"
        }
      ]
    },
    "/projects/{project}/devices/{device}/labels":{
      "post":{
        "tags":[
          "Devices & Labels"
        ],
        "summary":"Create a New Device Label",
        "description":"## Device display name and description\nThe `name` and `description` Device Labels are considered the display name and description of the \nDevice, and are used in different parts of the user interface in DT Studio.\n\nIt is recommended that REST API implementations use these two labels for the same purpose as \nDT Studio for a seamless integration.\n\n## Upserting\nThis endpoint can only be use to create new labels. Trying to create a label that already \nexists will result in a `409` error.\n\nIf you just want to set the Device Label without first checking if it exists (also known as upsert), \nsee the `/projects/{project}/devices:batchUpdate` endpoint.\n\n## Limitations\n* A maximum of 50 Device Labels (including key and value) are allowed.\n* A Label key can have a maximum of 127 characters, while a Label value can have a maximum of \n255 characters.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/NewLabel"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Label created successfully",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Label"
                }
              }
            }
          },
          "409":{
            "description":"Label already exists",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ErrorMessage409"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/DeviceID"
        }
      ]
    },
    "/projects/{project}/devices/{device}/labels/{label}":{
      "delete":{
        "tags":[
          "Devices & Labels"
        ],
        "summary":"Remove a Device Label",
        "description":"Removes the Device Label from the Device if it exists. If the Device Label does not exist, a `404` is returned.\n",
        "responses":{
          "200":{
            "description":"Device Label removed successfully",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          }
        }
      },
      "patch":{
        "tags":[
          "Devices & Labels"
        ],
        "summary":"Update an Existing Device Label",
        "description":"## Device display name and description\nThe `name` and `description` Device Labels are considered the display name and description of the \nDevice, and are used in different parts of the user interface in DT Studio.\n\nIt is recommended that REST API implementations use these two labels for the same purpose as \nDT Studio for a seamless integration.\n\n## Upserting\nThis endpoint can only be use to modify existing Device Labels. Trying to modify a Label that \ndoesn't exists will result in a `404` error.\n\nIf you just want to set the Device Label without first checking if it exists (also known as upsert), \nsee the `/projects/{project}/devices:batchUpdate` endpoint.\n\n## Limitations\nLabel value can have a maximum of 255 characters.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/labels_label_body"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Label updated successfully",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Label"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/DeviceID"
        },
        {
          "$ref":"#/components/parameters/LabelID"
        }
      ]
    },
    "/projects/{project}/devices:stream":{
      "get":{
        "tags":[
          "Live Events Streaming API"
        ],
        "summary":"Stream Events From Multiple Devices",
        "description":"Sets up a subscription to real-time Events from a set of Devices. Which Devices and Events are included can be configured\nusing the available query parameters. \n\nSee the [Streaming Events](https://developer.disruptive-technologies.com/docs/examples/streaming-events)\nguide in the Developer Docs for more details about how to set up an event stream.\n\n## Content types\nThe `:stream` endpoints supports two different formats for the received events: `text/event-stream` and `application/json`.\nThe format is selected using the `Accept` header, and defaults to `application/json` if the header is not set.\n\nThe difference between the two is that `text/event-stream` is a Server-Sent Events specific format, and will be used by default\nby any Server-Sent Events library. The `application/json` format will return one `JSON` object for each event separated by line\nbreaks, and can be easier to work with if you're not using a Server-Sent Events library.\n\n## Comparison to Data Connectors\nFor scalable and reliable server-to-server integrations, it is recommended to used Data Connectors instead of Server-Sent Events\nstreams. See the [Data Connector](https://developer.disruptive-technologies.com/docs/data-connectors/introduction-to-data-connector) \narticles on the developer website for more details.\n\nThe `:stream` API is only recommended when end-clients, such as web-apps or phone-apps, have direct access to the API for \nsetting up temporary streams. It can also be used for rapid development, proof-of-concept, or non-critical low-volume \nserver integrations.\n\nThe `:stream` have no means of automatically resuming the event stream if disconnected. If it is critical that you never \nlose an event, use Data Connectors instead.\n\n## Limitations\t\nAt most 50 active `:stream` connections per Service Account.\n\n## Server sent events\nThis call will subscribe to Server Sent Events (SSE) for all the Devices selected by query parameters.\n\nTo learn more about SSE, see the following resources: \n* [MDN Web Docs: Using server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events)\n* [MDN Web Docs: EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource)\n* [javascript.info: Server Sent Events](https://javascript.info/server-sent-events)\n* [HTML Living Standard: Server-sent events](https://html.spec.whatwg.org/multipage/server-sent-events.html)\n\n**Note:** This interactive documentation does not support streaming events. To test it, press `Try it out`, fill in \nthe query parameters, press `Send Request`, and use the generated `curl` command in your Terminal instead.\n\n## Authentication\nSome Server Sent Events libraries (namely JavaScript's `EventSource`) does not have the option to set HTTP headers.\n\nIn these cases, it's recommended to send the access token as a query parameter `?token=ACCESS_TOKEN`.\n\nSee the [Authentication article](https://developer.disruptive-technologies.com/docs/authentication/oauth2) to \nlearn more about how to acquire this token.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/DeviceIDList"
          },
          {
            "$ref":"#/components/parameters/LabelFilter"
          },
          {
            "$ref":"#/components/parameters/DeviceTypeFilter"
          },
          {
            "$ref":"#/components/parameters/EventTypeFilter"
          },
          {
            "$ref":"#/components/parameters/ProductNumberFilter"
          }
        ],
        "responses":{
          "200":{
            "description":"Device Event Stream Established",
            "content":{
              "text/event-stream":{
                "schema":{
                  "$ref":"#/components/schemas/StreamEvent"
                },
                "example":{
                  "result":{
                    "event":{
                      "eventId":"b8n5tttql4pg00bh8td0",
                      "targetName":"projects/b7s3e550fee000ba5dhg/devices/b6sfpsd7rihg0dm4ust0",
                      "eventType":"touch",
                      "data":{
                        "touch":{
                          "updateTime":"2021-03-03T10:33:27.668452Z"
                        }
                      },
                      "timestamp":"2021-03-03T10:33:27.668452Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/AuthToken"
        }
      ]
    },
    "/projects/{project}/devices:transfer":{
      "post":{
        "tags":[
          "Devices & Labels"
        ],
        "summary":"Transfer Devices Between Projects",
        "description":"Transfers all the Devices in the body of the request into the Project in the path of the request.\n\n\n## Permissions\nThe caller must have `device.transfer` Permission in both the Project(s) where\nthe Devices currently reside, as well as in the Project the Devices are being moved into.\nThis Permission is granted for Members with the Role of either `project.admin` or\n`organization.admin`.\n\nSee the [Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs for more details.\n\n# Limitations\n* Up to 100 devices can be transferred per request.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/project_devicestransfer_body"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Transfer response\n\nNote that a status code of `200` doesn't necessarily mean that all the Devices were \nsuccessfully transferred. Check if the `transferErrors` array is empty to make sure that \nall the requested transfers were successful.\n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_3"
                },
                "example":{
                  "transferredDevices":[
                    "/projects/<source_project_id>/devices/<device_id_1>"
                  ],
                  "transferErrors":[
                    {
                      "device":"/projects/<source_project_id>/devices/<device_id_2>",
                      "status":{
                        "code":"NOT_FOUND",
                        "message":"The device does not exist."
                      }
                    },
                    {
                      "device":"/projects/<source_project_id>/devices/<device_id_3>",
                      "status":{
                        "code":"INTERNAL_ERROR",
                        "message":"Operation timed out. Retry again in a few seconds."
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/dataconnectors":{
      "get":{
        "tags":[
          "Data Connectors"
        ],
        "summary":"List Data Connectors",
        "description":"Gets a list of all the Data Connectors in a specific Project.\n\nTo learn more about how to configure Data Connectors, see the \n[Advanced Configuration](https://developer.disruptive-technologies.com/docs/data-connectors/advanced-configurations) \nguide in the Developer Docs.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"Data Connectors listed successfully",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_4"
                },
                "example":{
                  "dataConnectors":[
                    {
                      "name":"projects/29/dataconnectors/b8n61epb54j0008bnjm0",
                      "displayName":"Building 14F FacilityManagement data stream",
                      "status":"ACTIVE",
                      "events":[
                        "touch",
                        "objectPresent"
                      ],
                      "labels":[
                        "buildingId"
                      ],
                      "type":"HTTP_PUSH",
                      "httpConfig":{
                        "url":"https://www.example.com/eventReception/events.dll?ETL=yes",
                        "signatureSecret":"SignEachMessageWithThisSecret",
                        "headers":{
                          "authorization":"CustomAuthorizationHeader"
                        }
                      }
                    }
                  ],
                  "nextPageToken":"c0vuqlucie6jqcc95nk0"
                }
              }
            }
          }
        }
      },
      "post":{
        "tags":[
          "Data Connectors"
        ],
        "summary":"Create a New Data Connector",
        "description":"Creates and configures a new Data Connector in a specific Project.\n\nThe Data Connector will be activated by default, and will start sending Events to the specified receiver.\n\nTo learn more about how to configure Data Connectors, see the \n[Advanced Configuration](https://developer.disruptive-technologies.com/docs/data-connectors/advanced-configurations) \nguide in the Developer Docs.\n\n## Quota\nA maximum of 10 Data Connectors can be created per project. A 400 error code is returned when this limit\nhas been exceeded.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/NewDataConnector"
              },
              "example":{
                "displayName":"Posting project event to firebase https function end point",
                "type":"HTTP_PUSH",
                "status":"ACTIVE",
                "events":[
                  "touch",
                  "objectPresent"
                ],
                "labels":[
                  "gid"
                ],
                "httpConfig":{
                  "url":"https://us-central1-sensors-x.cloudfunctions.net/pushMessage",
                  "signatureSecret":"MY-SECURE-SECRET",
                  "headers":{
                    "x-custom-header":"custom_header_value"
                  }
                }
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Data Connector created successfully",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DataConnector"
                }
              }
            }
          },
          "400":{
            "description":"Either an issue with the request body, or the quota has been exceeded.\n"
          }
        },
        "callbacks":{
          "HTTP POST Request":{
            "https://your-service.com/events":{
              "post":{
                "summary":"Your HTTPS POST Endpoint",
                "description":"This is where the Events from the Data Connector will be received by your service.\n",
                "requestBody":{
                  "content":{
                    "application/json":{
                      "schema":{
                        "$ref":"#/components/schemas/DataConnectorMessage"
                      },
                      "example":{
                        "event":{
                          "eventId":"b8n5tttql4pg00bh8td0",
                          "targetName":"projects/b7s3e550fee000ba5dhg/devices/b6sfpsd7rihg0dm4ust0",
                          "eventType":"touch",
                          "data":{
                            "touch":{
                              "updateTime":"2021-03-03T10:33:27.668452Z"
                            }
                          },
                          "timestamp":"2021-03-03T10:33:27.668452Z"
                        },
                        "labels":{
                          "buildingId":"n1"
                        }
                      }
                    }
                  },
                  "required":true
                },
                "responses":{
                  "200":{
                    "description":"Event received by your server"
                  }
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/dataconnectors/{dataconnector}":{
      "get":{
        "tags":[
          "Data Connectors"
        ],
        "summary":"Get a Single Data Connector",
        "description":"Gets the details, configuration, and status of a single Data Connector.\n\nTo learn more about how to configure Data Connectors, see the \n[Advanced Configuration](https://developer.disruptive-technologies.com/docs/data-connectors/advanced-configurations) \nguide in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Data Connector details retrieved",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DataConnector"
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "Data Connectors"
        ],
        "summary":"Delete a Data Connector",
        "description":"Deletes the specified Data Connector.\n\nNote that deleting a Data Connector might break an integration that is dependent on receiving events\nfrom this Data Connector.\n\nTo learn more about how to configure Data Connectors, see the \n[Advanced Configuration](https://developer.disruptive-technologies.com/docs/data-connectors/advanced-configurations) \nguide in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Data Connector deleted successfully",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          }
        }
      },
      "patch":{
        "tags":[
          "Data Connectors"
        ],
        "summary":"Update a Data Connector",
        "description":"Updates the configuration of the specified Data Connector.\n\nAll the included fields in the request body will be updated. This also means that it is not necessary\nto include all the fields in the body if you just want to update a single field. For example, if you want\nto disable a Data Connector, you can send a request with the following body: `{'status': 'USER_DISABLED'}`.\n\nTo learn more about how to configure Data Connectors, see the \n[Advanced Configuration](https://developer.disruptive-technologies.com/docs/data-connectors/advanced-configurations) \nguide in the Developer Docs.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/DataConnector"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Data Connector updated successfully",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DataConnector"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/DataConnectorID"
        }
      ]
    },
    "/projects/{project}/dataconnectors/{dataconnector}:metrics":{
      "get":{
        "tags":[
          "Data Connectors"
        ],
        "summary":"Get Data Connector Metrics",
        "description":"Get metrics for the last 3 hours for a Data Connector.\n\nThis will give you the number of successful and failed push attempts, as well as the 99th percentile latency.\n\nSee the [Receiving Events](https://developer.disruptive-technologies.com/docs/data-connectors/receiving-events)\narticle in the Developer Docs for details about how to successfully receive events using a Data Connector.\n",
        "responses":{
          "200":{
            "description":"Data Connector metrics retrieved",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_5"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/DataConnectorID"
        }
      ]
    },
    "/projects/{project}/dataconnectors/{dataconnector}:sync":{
      "post":{
        "tags":[
          "Data Connectors"
        ],
        "summary":"Synchronize a Data Connector",
        "description":"This endpoint allows you to synchronize your cloud service with the current\nstate of the Devices in your Project. This can be convenient when a new \nData Connector has been created, and you want it to have the most recent data\nimmediately.\n\nAfter this endpoint has been called, the most recent Event of each \ntype will be pushed to the Data Connector for all the Devices in the Project.\nThe timestamp of the events will be the same as when they were sent originally,\nbut the `eventId` will be different.\n\nThis feature is also described in the \n[Advanced Configurations](https://developer.disruptive-technologies.com/docs/data-connectors/advanced-configurations#synchronize)\narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Command to re-push events has been accepted",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/DataConnectorID"
        }
      ]
    },
    "/roles":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"List Roles",
        "description":"Lists all the Roles a Member can have in either Projects or Organizations. Each Role contains \nall the Permissions that are granted when a Member is assigned that Role in a Project or\nan Organization.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"Roles list successfully returned.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_6"
                },
                "example":{
                  "roles":[
                    {
                      "name":"roles/organization.admin",
                      "displayName":"Organization administrator",
                      "description":"Administrator in organization",
                      "permissions":[
                        "..."
                      ]
                    },
                    {
                      "name":"roles/project.admin",
                      "displayName":"Project administrator",
                      "description":"Administrator in project",
                      "permissions":[
                        "..."
                      ]
                    },
                    {
                      "name":"roles/project.developer",
                      "displayName":"Project developer",
                      "description":"Developer in project",
                      "permissions":[
                        "..."
                      ]
                    },
                    {
                      "name":"roles/project.user",
                      "displayName":"Project user",
                      "description":"User in project",
                      "permissions":[
                        "..."
                      ]
                    }
                  ],
                  "nextPageToken":""
                }
              }
            }
          }
        }
      }
    },
    "/roles/{role}":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Get a Single Role",
        "description":"Gets the details for a single Role a Member can have in either Projects or Organizations.\nThe Role contains all the Permissions that are granted when a Member is assigned that Role in a \nProject or an Organization.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Role detail successfully returned.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Role"
                },
                "example":{
                  "name":"roles/project.user",
                  "displayName":"Project user",
                  "description":"User in project",
                  "permissions":[
                    "..."
                  ]
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/RoleID"
        }
      ]
    },
    "/organizations":{
      "get":{
        "tags":[
          "Organizations & Projects"
        ],
        "summary":"List Organizations",
        "description":"Lists all the Organizations that are available to the caller.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"Got list of organizations.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_7"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization}":{
      "get":{
        "tags":[
          "Organizations & Projects"
        ],
        "summary":"Get a Single Organization",
        "description":"Gets the details for a single Organization.\n",
        "responses":{
          "200":{
            "description":"Got organization details.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Organization"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/OrganizationIDForPath"
        }
      ]
    },
    "/organizations/{organization}/permissions":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"List Organization Permissions",
        "description":"Lists all the Permissions the caller has in the specified Organization.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"Permissions held by caller.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/OrganizationPermissionList"
                },
                "example":{
                  "permissions":[
                    "project.create",
                    "device.transfer",
                    "membership.create",
                    "membership.read",
                    "membership.update",
                    "membership.delete",
                    "organization.update",
                    "organization.read"
                  ],
                  "nextPageToken":""
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/OrganizationIDForPath"
        }
      ]
    },
    "/organizations/{organization}/members":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"List Organization Members",
        "description":"Lists the Memberships granted for the specified Organization.\n\nSee the [Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs for more details.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "$ref":"#/components/responses/ListMembersResponse"
          }
        }
      },
      "post":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Grant a New Organization Membership",
        "description":"Grants a User or Service Account access to the specified Organization by inviting them by email\nas a Member. The Permissions the Account gets within the Organization depends on the Role \nthey are given. Currently, the only Role available for Organization Members is `organization.admin`.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n\n## Member status\nIf the email of the new Member belongs to a Service Account, the Membership will get the status \n`ACCEPTED` immediately. If it belongs to a User, the Membership will only be set to `ACCEPTED`\nif an Account already exists for that email. Otherwise, the status will be set to `PENDING` until\nthe User has accepted the invitation email they've received. The invite URL can in this case also\nbe fetched by using the `:getInviteUrl` endpoint.\n\n## Resending invitation email\nIf you need to resend the invitation email, you can delete the Membership using the `DELETE\n/organizations/{organization}/members/{member}` endpoint, and then send a request to this \nendpoint again to recreate the Member.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/organization_members_body"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Membership created successfully. The response body contains the new Member object.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/OrganizationIDForPath"
        }
      ]
    },
    "/organizations/{organization}/members/{member}":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Get an Organization Member",
        "description":"Gets the details and current status of a specific Member in the Organization.\n\nThe identifier of the Member will be the same as the identifier of the Account that \nis being looked up (User or Service Account).\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Membership details successfully returned.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Revoke an Organization Membership",
        "description":"Deletes the Membership from the Organization, which has the effect of revoking access \nto the Organization for the specified User or Service Account.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Membership successfully revoked.",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/OrganizationIDForPath"
        },
        {
          "$ref":"#/components/parameters/MemberID"
        }
      ]
    },
    "/organizations/{organization}/members/{member}:getInviteUrl":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Get an Organization Member Invite URL",
        "description":"Gets the invitation URL for an Organization Member that have not yet accepted the invitation\nto create an Account. This is only available for Members that have the status `PENDING`. If \nthe status of the Member is `ACCEPTED`, this endpoint will return a `400` status code.\n\nMemberships for both User emails that are already linked to an Account, as well as Service \nAccounts, will immediately get the status `ACCEPTED` when created. This means that this endpoint\nonly applies to User emails that have not yet created an account.\n",
        "responses":{
          "200":{
            "description":"Invite URL successfully returned.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "400":{
            "description":"The Member has already accepted the invitation.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ErrorMessage400"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/OrganizationIDForPath"
        },
        {
          "$ref":"#/components/parameters/MemberID"
        }
      ]
    },
    "/projects":{
      "get":{
        "tags":[
          "Organizations & Projects"
        ],
        "summary":"List Projects",
        "description":"Gets a list of all the Projects available to the caller.\n\nThe Projects can be filtered to a specific Organization, as well as with a keyword based search.\n\n## Inventory project\nAll Organizations have a single inventory Project, which has the `inventory` field set to `true`. \n",
        "parameters":[
          {
            "$ref":"#/components/parameters/OrganizationNameForQuery"
          },
          {
            "$ref":"#/components/parameters/ListProjectQuery"
          },
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"List of Projects successfully retrieved",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_9"
                }
              }
            }
          }
        }
      },
      "post":{
        "tags":[
          "Organizations & Projects"
        ],
        "summary":"Create a New Project",
        "description":"Creates a new Project in the Organization specified in the request body.\n\n## Quota\nA maximum of 500 projects can be created per organization. A 400 error code is returned when this limit\nhas been exceeded.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/projects_body"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Project created successfully.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Project"
                }
              }
            }
          },
          "400":{
            "description":"Either an issue with the request body, or the quota has been exceeded.\n"
          }
        }
      }
    },
    "/projects/{project}":{
      "get":{
        "tags":[
          "Organizations & Projects"
        ],
        "summary":"Get a Single Project",
        "description":"Gets the details for a single Project.",
        "responses":{
          "200":{
            "description":"Got Projects details.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Project"
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "Organizations & Projects"
        ],
        "summary":"Delete a Project",
        "description":"Deletes a project.\n\nA project can only be deleted if it contains no Devices, Data Connectors, or Service Accounts.\nOtherwise, this request will return a `400` status code.\n",
        "responses":{
          "200":{
            "description":"Project successfully deleted.",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          },
          "400":{
            "description":"The Project probably contains either Devices, Data Connectors, or Service Accounts. Make sure\nthe Project is completely empty, then try again.\n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ErrorMessage400"
                }
              }
            }
          }
        }
      },
      "patch":{
        "tags":[
          "Organizations & Projects"
        ],
        "summary":"Update a Project",
        "description":"Updates the display name of the specified Project.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Project"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Project created successfully.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Project"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/permissions":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"List Project Permissions",
        "description":"List all the Permissions the caller has in the specified Project.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"Permissions held by caller.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProjectPermissionList"
                },
                "example":{
                  "permissions":[
                    "dataconnector.create",
                    "dataconnector.read",
                    "dataconnector.update",
                    "dataconnector.delete",
                    "device.read",
                    "device.update",
                    "device.transfer",
                    "emulator.create",
                    "emulator.read",
                    "emulator.update",
                    "emulator.delete",
                    "membership.create",
                    "membership.read",
                    "membership.update",
                    "membership.delete",
                    "project.create",
                    "project.read",
                    "project.update",
                    "project.delete",
                    "serviceaccount.create",
                    "serviceaccount.read",
                    "serviceaccount.update",
                    "serviceaccount.delete",
                    "serviceaccount.key.create",
                    "serviceaccount.key.read",
                    "serviceaccount.key.delete"
                  ],
                  "nextPageToken":""
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/members":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"List Project Members",
        "description":"Lists the Memberships granted for the specified Project.\n\nThe identifier of the Member will be the same as the identifier of the Account that is being looked \nup (User or Service Account).\n\n# Developer Docs\nSee the [Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs for more details.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "$ref":"#/components/responses/ListMembersResponse"
          }
        }
      },
      "post":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Grant a New Project Membership",
        "description":"Grants a User or Service Account access to the specified Project by inviting them by email\nas a Member. The Permissions the Account gets within the Project depends on the Role \nthey are given. A Member can only have one Role.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n\n## Member status\nIf the email of the new Member belongs to a Service Account, the Membership will get the status \n`ACCEPTED` immediately. If it belongs to a User, the Membership will only be set to `ACCEPTED`\nif an Account already exists for that email. Otherwise, the status will be set to `PENDING` until\nthe User has accepted the invitation email they've received. The invite URL can in this case also\nbe fetched by using the `:getInviteUrl` endpoint.\n\n## Resending invitation email\nIf you need to resend the invitation email, you can delete the Membership using the `DELETE\n/projects/{project}/members/{member}` endpoint, and then send a request to this endpoint again\nto recreate the Member.\n        \n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/project_members_body"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Member created successfully",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/members/{member}":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Get a Project Member",
        "description":"Gets the details and current status of a specific Member in the Project.\n\nThe identifier of the Member will be the same as the identifier of the Account that \nis being looked up (User or Service Account).\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Membership details successfully returned.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Revoke a Project Membership",
        "description":"Deletes the Membership from the Project, which has the effect of revoking access \nto the Project for the specified User or Service Account.\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Membership successfully revoked.",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          }
        }
      },
      "patch":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Update a Project Member",
        "description":"Updates the Role of a Member in the Project. Currently, a Member can only have one Role.\n\nThe identifier of the Member will be the same as the identifier of the Account that \nis being looked up (User or Service Account).\n\nTo learn more about Memberships, Roles, and Permissions, see the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Member"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Member updated successfully.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/MemberID"
        }
      ]
    },
    "/projects/{project}/members/{member}:getInviteUrl":{
      "get":{
        "tags":[
          "Memberships & Access Control"
        ],
        "summary":"Get a Project Member Invite URL",
        "description":"Gets the invitation URL for a Project Member that have not yet accepted the invitation\nto create an Account. This is only available for Members that have the status `PENDING`. If \nthe status of the Member is `ACCEPTED`, this endpoint will return a `400` status code.\n\nMemberships for both User emails that are already linked to an Account, as well as Service \nAccounts, will immediately get the status `ACCEPTED` when created. This means that this endpoint\nonly applies to User emails that have not yet created an account.\n",
        "responses":{
          "200":{
            "description":"Invite URL successfully returned.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "400":{
            "description":"The Member has already accepted the invitation.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ErrorMessage400"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/MemberID"
        }
      ]
    },
    "/projects/{project}/serviceaccounts":{
      "get":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"List Service Accounts",
        "description":"Lists all the Service Accounts in the Project.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"Got list of Service accounts.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_10"
                }
              }
            }
          }
        }
      },
      "post":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"Create a New Service Account",
        "description":"Creates a new Service Account in the Project.\n\nTo start using the Service Account add it as a Member to a Project or an Organization, and create\na Key to use for authentication.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n\nSee the [Authentication](https://developer.disruptive-technologies.com/docs/authentication)\narticle to learn how to authenticate the Service Account.\n\n## Quota\nA maximum of 10 Service Accounts can be created per project. A 400 error code is returned when this limit\nhas been exceeded.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/NewServiceAccount"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"The newly created Service Account is returned as the response body.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ServiceAccount"
                }
              }
            }
          },
          "400":{
            "description":"Either an issue with the request body, or the quota has been exceeded.\n"
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        }
      ]
    },
    "/projects/{project}/serviceaccounts/{serviceaccount}":{
      "get":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"Get a Single Service Account",
        "description":"Gets a single Service Account in the specified Project.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"Returns the requested Service Account.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ServiceAccount"
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"Delete a Service Account",
        "description":"Deletes the specified Service Account, which will revoke any Memberships that has been granted\nto this Service Account.\n\n**Note:** All the associated Keys will be deleted as well, which will stop any existing integrations that\nuses this Service Account's Keys from being able to authenticate.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n",
        "responses":{
          "200":{
            "description":"The Service Account was successfully deleted.",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          }
        }
      },
      "patch":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"Update a Service Account",
        "description":"Updates the specified Service Account.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ServiceAccount"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"The updated Service Account is returned in the response.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ServiceAccount"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/ServiceAccountID"
        }
      ]
    },
    "/projects/{project}/serviceaccounts/{serviceaccount}/keys":{
      "get":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"List Service Account Keys",
        "description":"List all the keys that belong to the specified Service Account. Any of these Keys can be used \nto authenticate the Service Account.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n\nSee the [Authentication](https://developer.disruptive-technologies.com/docs/authentication)\narticle to learn how to authenticate the Service Account.\n",
        "parameters":[
          {
            "$ref":"#/components/parameters/PageSize"
          },
          {
            "$ref":"#/components/parameters/PageToken"
          }
        ],
        "responses":{
          "200":{
            "description":"Got list of Service Account Keys.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_11"
                }
              }
            }
          }
        }
      },
      "post":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"Create a New Service Account Key",
        "description":"Creates a new Key for the specified Service Account. The credentials in this Key can be exchanged\nfor an access token, which in turn can be used to access the REST API.\n\n**Note:** The `secret` that is returned from this request can **not** be retrieved later, so \nmake sure to write it down in a secure location.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n\nSee the [Authentication](https://developer.disruptive-technologies.com/docs/authentication)\narticle to learn how to authenticate the Service Account.\n\n## Limitations\n* A Service Account can have a maximum of 10 keys.\n",
        "responses":{
          "200":{
            "description":"Successfully created new key.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ServiceAccountKeyWithSecret"
                }
              }
            }
          },
          "409":{
            "description":"The maximum number of Keys for this Service Account has been reached. Delete one of the existing\nKeys to create a new one.\n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ErrorMessage409"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/ServiceAccountID"
        }
      ]
    },
    "/projects/{project}/serviceaccounts/{serviceaccount}/keys/{key}":{
      "get":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"Get a Single Service Account Key",
        "description":"Gets a single Key for the specified Service Account.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n\nSee the [Authentication](https://developer.disruptive-technologies.com/docs/authentication)\narticle to learn how to authenticate the Service Account.\n",
        "responses":{
          "200":{
            "description":"The Service Account Key.",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ServiceAccountKey"
                }
              }
            }
          }
        }
      },
      "delete":{
        "tags":[
          "Service Accounts & Keys"
        ],
        "summary":"Delete a Service Account Key",
        "description":"Delete a Key of a Service Account. \n\n**Note:** Any REST API integration that uses this Key will no longer be able to authenticate.\n\nTo learn more about Service Accounts, see the \n[Introduction to Service Accounts](https://developer.disruptive-technologies.com/docs/service-accounts/introduction-to-service-accounts) \narticle in the Developer Docs.\n\nSee the [Authentication](https://developer.disruptive-technologies.com/docs/authentication)\narticle to learn how to authenticate the Service Account.\n",
        "responses":{
          "200":{
            "description":"The Service Account Key was successfully deleted.",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object"
                }
              }
            }
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ProjectID"
        },
        {
          "$ref":"#/components/parameters/ServiceAccountID"
        },
        {
          "$ref":"#/components/parameters/ServiceAccountKeyID"
        }
      ]
    },
    "/claimInfo":{
      "get":{
        "tags":[
          "Claiming Devices & Kits"
        ],
        "summary":"Get Claim Information for a Single Kit or Device",
        "description":"Get claiming information for either a device or a kit by looking up an identifier.\n\nThis endpoint is intended to be used as part of a your commissioning process to start the device \nsubscriptions. It is designed to let an end-user either scan the QR codes on kit boxes or devices \nthemselves, or enter the kit identifier manually. The response will indicate whether the scanned \nidentifier was for a kit or a device, and details such as whether it has previously been claimed. \nClaimed devices can't be re-claimed. \n\nFor inspiration about how this could work, see how these endpoints are used in Studio in the \n[Getting started with your first Sensor Kit](https://support.disruptive-technologies.com/hc/en-us/articles/360010508959-Getting-started-with-your-first-Sensor-Kit) \nsupport page.\n\n## Permissions\n\nThis endpoint does not require any specific permissions. The only requirement to call this endpoint\nis a valid access token.\n\n## Rate-Limit\n\nNote that this endpoint has a lower rate-limit than other endpoints, so make sure you follow \nour recommendations for handling rate-limiting in our \n[developer docs](https://developer.disruptive-technologies.com/docs/error-codes#429).\nAt the time of this writing, the rate-limit for this endpoint is 5 requests every 5 seconds.\n",
        "responses":{
          "200":{
            "description":"Either the device or kit that matches the identifier.\n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_12"
                },
                "examples":{
                  "device":{
                    "summary":"Device response",
                    "description":"These fields will be present in the response when the identifier in the request was for a device:\n\n| Field                  | Type        | Description |\n| ----------             | ----------  | ----------- |\n| `type`                 | `string`    | Will always be `DEVICE` when the request was for a device identifier. To see the fields for when this is `KIT`, use the \"Examples\" dropdown above to select the \"Kit response\" example. |\n| `device`               | `object`    | An object containing details for the device that was requested. |\n| `device.deviceId`      | `string`    | The identifier of the device. In this case, it will be the same as the identifier in the request. |\n| `device.deviceType`    | `string`    | The device type (eg. `temperature`). See our [Device Types](https://developer.disruptive-technologies.com/docs/concepts/devices) page for all possible values. |\n| `device.productNumber` | `string`    | The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors). |\n| `device.isClaimed`     | `boolean`   | Whether the device was already claimed. If this is `true`, you will receive an `ALREADY_CLAIMED` error when attempting to claim it. | \n",
                    "value":{
                      "type":"DEVICE",
                      "device":{
                        "deviceId":"cbvatvi87d5i8s51aagg",
                        "deviceType":"temperature",
                        "productNumber":"102058",
                        "isClaimed":false
                      }
                    }
                  },
                  "kit":{
                    "summary":"Kit response",
                    "description":"These fields will be present in the response when the identifier in the request was for a kit:\n\n| Field                         | Type      | Description |\n| ----------                    | --------- | ----------- |\n| `type`                        | `string`  | Will always be `KIT` when the request was for a kit identifier. To see the fields for when this is `DEVICE`, use the \"Examples\" dropdown above to select the \"Device response\" example. |\n| `kit`                         | `object`  | An object containing details for the kit that was requested. |\n| `kit.kitId`                   | `string`  | The identifier of the kit that was requested. In this case, it will be the same as the identifier in the request. |\n| `kit.displayName`             | `string`  | The display name of the kit. This is the same as the name on the printed sticker on the kit box. |\n| `kit.devices`                 | `array`   | An array of the devices contained in the kit. Each item in the array is a device object. |\n| `kit.devices[].deviceId`      | `string`  | The identifier of the device. |\n| `kit.devices[].deviceType`    | `string`  | The device type (eg. `temperature`). See our [Device Types](https://developer.disruptive-technologies.com/docs/concepts/devices) page for all possible values. |\n| `kit.devices[].productNumber` | `string`  | The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors). |\n| `kit.devices[].isClaimed`     | `boolean` | Whether the device was already claimed. If this is `true`, you will receive an `ALREADY_CLAIMED` error for this specific device if attempting to claim the kit. | \n",
                    "value":{
                      "type":"KIT",
                      "kit":{
                        "kitID":"abc-01-abc",
                        "displayName":"Starter Kit EU",
                        "devices":[
                          {
                            "deviceId":"cbvb8pi87d5iup9au4n0",
                            "deviceType":"temperature",
                            "productNumber":"102058",
                            "isClaimed":false
                          },
                          {
                            "deviceId":"cbvlo5a87d5gsoh5tak0",
                            "deviceType":"proximity",
                            "productNumber":"102075",
                            "isClaimed":true
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404":{
            "description":"The requested identifier couldn't be found.\n"
          },
          "429":{
            "description":"This endpoint has a lower rate-limit than other endpoints, so make sure you follow our recommendations \nfor handling rate-limiting in our \n[developer docs](https://developer.disruptive-technologies.com/docs/error-codes#429).\n"
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ClaimInfoIdentifier"
        },
        {
          "$ref":"#/components/parameters/ClaimInfoOrganization"
        }
      ]
    },
    "/projects/{project}/devices:claim":{
      "post":{
        "tags":[
          "Claiming Devices & Kits"
        ],
        "summary":"Claim Kits and Devices",
        "description":"\nClaiming a kit/device does two things:\n- Starts the subscription of the device(s). If the device(s) has a pre-paid period, this will be activated.\n- Adds the device(s) to your project.\n\nThis endpoint is intended to be used as part of a your commissioning process to start the device subscriptions.\nA typical implementation will first use the `/claimInfo` endpoint to discover information about the scanned\nkit/device. This information would then be presented to a user to let them verify that this is what they wanted\nto claim. Finally, when the user approves the devices and/or kits to be claimed, this endpoint would be called.\nFor inspiration about how this could work, see how these endpoints are used in Studio in the \n[Getting started with your first Sensor Kit](https://support.disruptive-technologies.com/hc/en-us/articles/360010508959-Getting-started-with-your-first-Sensor-Kit) \nsupport page.\n\nClaiming is done by providing device IDs, kit IDs, or both in the request body, and the endpoint path must specify \nwhich project the devices should be claimed into. Specifying a kit ID in the request body is equivalent to specifying\nall the devices in the kit. When claiming a kit, only the devices that are not yet claimed (`isClaimed` is `false`) \nwill be claimed, so it's OK to claim an entire kit where some of the devices are already claimed.\n\nThe response will include which devices got successfully claimed, as well as any potential errors\nthat occurred. Errors will typically be that some devices in a kit were already claimed.\n\n# Dry Run\n\nThis endpoint takes a required `dryRun` query parameter that can be set to `true` during development. When\nthis is set to `true`, no subscriptions will be started, and the devices will not be added to your \nproject. The response will be exactly the same as if dry run was disabled. \n\nRemember to set `dryRun` to `false` before deploying your code to production.\n\n## Permissions\n\nThis endpoint requires that the authenticated account has the `project.update` permission in the project\nthe devices are being claimed into. This permission is granted by the `project.admin` or `organization.admin` \nroles. See the \n[Managing Access Rights](https://developer.disruptive-technologies.com/docs/service-accounts/managing-access-rights)\narticle in the Developer Docs for more details.\n\n## Rate-Limit\n\nNote that this endpoint has a lower rate-limit than other endpoints, so make sure you follow \nour recommendations for handling rate-limiting in our \n[developer docs](https://developer.disruptive-technologies.com/docs/error-codes#429).\nAt the time of this writing, the rate-limit for this endpoint is 1 request every 5 seconds.\n",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/project_devicesclaim_body"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"The claiming request was successful, but it's possible that some of the devices couldn't be claimed.\nCheck the `claimErrors` for any potential errors during claiming.\n\n| Field                            | Type      | Description |\n| ----------                       | --------- | ----------- |\n| `claimedDevices`                 | `array`   | A list of all the devices that got successfully claimed. This list will contain devices from both the `deviceIds` and `kitIds` list of the request. |\n| `claimedDevices.deviceId`        | `string`  | The identifier of the claimed device. |\n| `claimedDevices.deviceType`      | `string`  | The device type of the claimed device (eg. `temperature`). See our [Device Types](https://developer.disruptive-technologies.com/docs/concepts/devices) page for all possible values. |\n| `claimedDevices.productNumber`   | `string`  | The product number of the claimed device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors). |\n| `claimedDevices.isClaimed`       | `boolean` | Since the device was just claimed, this will always be `true`. It's included only to make the data structure consistent with the `/claimInfo` endpoint. |\n| `claimErrors`                    | `object`  | An object containing anything that went wrong during claiming. |\n| `claimErrors.devices`            | `array`   | A list claim errors for specific devices. |\n| `claimErrors.devices[].deviceId` | `string`  | The identifier of the device that failed to be claimed. |\n| `claimErrors.devices[].code`     | `string`  | Possible values: `[\"NOT_FOUND\", \"ALREADY_CLAIMED\"]`. <br />If it's `NOT_FOUND`, a device in the `deviceIds` list in the request couldn't be found. If it's `ALREADY_CLAIMED`, either one of the devices in `kitIds` or in `deviceIds` of the request was already claimed (`isClaimed` was `true`). |\n| `claimErrors.devices[].message`  | `string`  | A user presentable error message of why this specific device couldn't be claimed. |\n| `claimErrors.kits`               | `array`   | A list of claim errors for specific kits. |\n| `claimErrors.kits[].kitId`       | `string`  | The identifier of the kit that failed to be claimed. | \n| `claimErrors.kits[].code`        | `string`  | Possible values: `[\"NOT_FOUND\"]`. <br />When the error code is `NOT_FOUND` it means that a kit in `kitIds` in the request couldn't be found. | \n| `claimErrors.kits[].message`     | `string`  | A user presentable error message of why devices in this specific kit couldn't be claimed. | \n",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/inline_response_200_13"
                },
                "example":{
                  "claimedDevices":[
                    {
                      "deviceId":"cbvb8pi87d5iup9au4n0",
                      "deviceType":"temperature",
                      "productNumber":"102058",
                      "isClaimed":true
                    },
                    {
                      "deviceId":"cc14n1q87d5lmsgliing",
                      "deviceType":"proximity",
                      "productNumber":"102075",
                      "isClaimed":true
                    }
                  ],
                  "claimErrors":{
                    "devices":[
                      {
                        "deviceId":"cc14jta87d5lcevkcn10",
                        "code":"NOT_FOUND",
                        "message":"The device was not found"
                      },
                      {
                        "deviceId":"cc14kci87d5led9estf0",
                        "code":"ALREADY_CLAIMED",
                        "message":"The device was previously claimed"
                      }
                    ],
                    "kits":[
                      {
                        "kitId":"gco-78-pru",
                        "code":"NOT_FOUND",
                        "message":"The kit was not found"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400":{
            "description":"Most likely, the `dryRun` query parameter is missing from the request. This has to always be explicitly\nincluded to reduce the likelihood of accidental claim during development.\n"
          },
          "429":{
            "description":"This endpoint has a lower rate-limit than other endpoints, so make sure you follow our recommendations \nfor handling rate-limiting in our \n[developer docs](https://developer.disruptive-technologies.com/docs/error-codes#429).\n"
          }
        }
      },
      "parameters":[
        {
          "$ref":"#/components/parameters/ClaimDryRun"
        },
        {
          "$ref":"#/components/parameters/ClaimDestinationProject"
        }
      ]
    }
  },
  "components":{
    "schemas":{
      "DeviceName":{
        "type":"string",
        "description":"The resource name of a device\n"
      },
      "DeviceID":{
        "type":"string"
      },
      "Device":{
        "type":"object",
        "discriminator":{
          "propertyName":"type",
          "mapping":{
            "touch":"#/components/schemas/TouchSensor",
            "temperature":"#/components/schemas/TemperatureSensor",
            "proximity":"#/components/schemas/ProximitySensor",
            "humidity":"#/components/schemas/HumiditySensor",
            "touchCounter":"#/components/schemas/CountingTouchSensor",
            "proximityCounter":"#/components/schemas/CountingProximitySensor",
            "waterDetector":"#/components/schemas/WaterDetectionSensor",
            "motion":"#/components/schemas/MotionSensor",
            "contact":"#/components/schemas/ContactSensor",
            "deskOccupancy":"#/components/schemas/DeskOccupancySensor",
            "co2":"#/components/schemas/CO2Sensor",
            "ccon":"#/components/schemas/CloudConnector"
          }
        },
        "oneOf":[
          {
            "$ref":"#/components/schemas/TouchSensor"
          },
          {
            "$ref":"#/components/schemas/TemperatureSensor"
          },
          {
            "$ref":"#/components/schemas/ProximitySensor"
          },
          {
            "$ref":"#/components/schemas/HumiditySensor"
          },
          {
            "$ref":"#/components/schemas/CountingTouchSensor"
          },
          {
            "$ref":"#/components/schemas/CountingProximitySensor"
          },
          {
            "$ref":"#/components/schemas/WaterDetectionSensor"
          },
          {
            "$ref":"#/components/schemas/MotionSensor"
          },
          {
            "$ref":"#/components/schemas/ContactSensor"
          },
          {
            "$ref":"#/components/schemas/DeskOccupancySensor"
          },
          {
            "$ref":"#/components/schemas/CO2Sensor"
          },
          {
            "$ref":"#/components/schemas/CloudConnector"
          }
        ]
      },
      "TouchSensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For touch sensors the type value is \"touch\"",
            "enum":[
              "touch"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A touch sensor.\n"
      },
      "TemperatureSensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For temperature sensors the type value is \"temperature\".",
            "enum":[
              "temperature"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/TemperatureEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/ProbeWireStatusEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A temperature sensor.\n"
      },
      "ProximitySensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For object detection sensors the value is \"proximity\"",
            "enum":[
              "proximity"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/ObjectPresentEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"An object detection sensor.\n"
      },
      "HumiditySensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For humidity sensors the type value is \"humidity\".",
            "enum":[
              "humidity"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/HumidityEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A humidity sensor.\n"
      },
      "CountingTouchSensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For counting touch sensors the type value is \"touchCounter\"",
            "enum":[
              "touchCounter"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/TouchCountEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A counting touch sensor.\n"
      },
      "CountingProximitySensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For counting proximity sensors the value is \"proximityCounter\"",
            "enum":[
              "proximityCounter"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/ObjectPresentCountEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A counting proximity sensor.\n"
      },
      "WaterDetectionSensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For water detector sensors the value is \"waterDetector\"",
            "enum":[
              "waterDetector"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/WaterPresentEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A water detector sensor.\n"
      },
      "MotionSensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For motion sensors the value is \"motion\"",
            "enum":[
              "motion"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/MotionEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A motion sensor.\n"
      },
      "ContactSensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For contact (Door & Window) sensors the value is \"contact\"",
            "enum":[
              "contact"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/ContactEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A contact (Door & Window) sensor.\n"
      },
      "DeskOccupancySensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For desk occupancy sensors the value is \"deskOccupancy\"",
            "enum":[
              "deskOccupancy"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/DeskOccupancyEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A desk occupancy sensor.\n"
      },
      "CO2Sensor":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For co2 sensors the value is \"co2\"",
            "enum":[
              "co2"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of Sensors.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/NetworkStatusEventData"
              },
              {
                "$ref":"#/components/schemas/BatteryStatusEventData"
              },
              {
                "$ref":"#/components/schemas/HumidityEventData"
              },
              {
                "$ref":"#/components/schemas/CO2EventData"
              },
              {
                "$ref":"#/components/schemas/PressureEventData"
              },
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A CO2 sensor.\n"
      },
      "CloudConnector":{
        "required":[
          "labels",
          "name",
          "productNumber",
          "reported",
          "type"
        ],
        "properties":{
          "name":{
            "$ref":"#/components/schemas/DeviceName"
          },
          "type":{
            "type":"string",
            "description":"For cloud connectors the value is \"ccon\"",
            "enum":[
              "ccon"
            ]
          },
          "labels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of labels used for indexing and search of cloud connectors.\n"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of  when the Sensor was last modified.\n"
          },
          "reported":{
            "type":"object",
            "anyOf":[
              {
                "$ref":"#/components/schemas/ConnectionStatusEventData"
              },
              {
                "$ref":"#/components/schemas/EthernetStatusEventData"
              },
              {
                "$ref":"#/components/schemas/CellularStatusEventData"
              },
              {
                "$ref":"#/components/schemas/TouchEventData"
              },
              {
                "type":"object",
                "properties":{
                  "connectionLatency":{
                    "description":"This field is deprecated, but will show up in the response with value null",
                    "nullable":true,
                    "deprecated":true
                  }
                }
              }
            ]
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can be found on the support pages for both [Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors)."
          }
        },
        "description":"A cloud connector device.\n"
      },
      "NetworkStatusCloudConnector":{
        "type":"object",
        "properties":{
          "id":{
            "type":"string"
          },
          "signalStrength":{
            "type":"integer"
          },
          "rssi":{
            "type":"integer"
          }
        }
      },
      "NetworkStatus":{
        "type":"object",
        "properties":{
          "signalStrength":{
            "type":"integer"
          },
          "rssi":{
            "type":"integer"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the network status was last modified.\n"
          },
          "cloudConnectors":{
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/NetworkStatusCloudConnector"
            }
          },
          "transmissionMode":{
            "type":"string",
            "description":"`LOW_POWER_STANDARD_MODE` - Message was sent on preferred frequency, using low power.\n`HIGH_POWER_BOOST_MODE` - Message was sent using more energy expensive frequency band. Indicates connectivity difficulties.\n",
            "enum":[
              "LOW_POWER_STANDARD_MODE",
              "HIGH_POWER_BOOST_MODE"
            ]
          }
        }
      },
      "ConnectionStatus":{
        "type":"object",
        "properties":{
          "connection":{
            "type":"string",
            "description":"`OFFLINE` - The Sensor or Cloud Connector is offline.\n`ETHERNET` - The Cloud Connector is connected to the internet through an Ethernet cable.\n`CELLULAR` - The Cloud Connector is connected to the internet through a cellular connection.\n`SDS` - The Sensor is online and communicates through the [Secure Data Shot](https://www.disruptive-technologies.com/explore/platform-security-how-we-make-sure-sensor-data-is-private-and-secure) protocol.\n",
            "enum":[
              "OFFLINE",
              "ETHERNET",
              "CELLULAR",
              "SDS"
            ]
          },
          "available":{
            "type":"array",
            "items":{
              "type":"string",
              "description":"A list containing the available connection types for the Sensor or Cloud Connector.\n",
              "enum":[
                "ETHERNET",
                "CELLULAR",
                "SDS"
              ]
            }
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) for the connection status update.\n"
          }
        }
      },
      "ErrorMessage400":{
        "type":"object",
        "properties":{
          "code":{
            "type":"integer",
            "description":"The status code of the error.",
            "example":400
          },
          "message":{
            "type":"string",
            "description":"A message describing what went wrong.",
            "example":"Bad Request"
          },
          "help":{
            "type":"string",
            "description":"A link to the relevant section in the Developer Docs that describes the error in more detail.\n",
            "example":"https://developer.d21s.com/docs/error-codes#400"
          }
        }
      },
      "ErrorMessage409":{
        "type":"object",
        "properties":{
          "code":{
            "type":"integer",
            "description":"The status code of the error.",
            "example":409
          },
          "message":{
            "type":"string",
            "description":"A message describing what went wrong.",
            "example":"Conflict"
          },
          "help":{
            "type":"string",
            "description":"A link to the relevant section in the Developer Docs that describes the error in more detail.\n",
            "example":"https://developer.d21s.com/docs/error-codes#409"
          }
        }
      },
      "ConnectivityError":{
        "type":"object",
        "properties":{
          "code":{
            "type":"integer"
          },
          "message":{
            "type":"string"
          }
        }
      },
      "EthernetStatus":{
        "required":[
          "errors",
          "ipAddress",
          "macAddress",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "macAddress":{
            "type":"string"
          },
          "ipAddress":{
            "type":"string"
          },
          "errors":{
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ConnectivityError"
            }
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) for the connection status update.\n"
          }
        }
      },
      "CellularStatus":{
        "required":[
          "signalStrength"
        ],
        "type":"object",
        "properties":{
          "signalStrength":{
            "type":"integer"
          },
          "errors":{
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ConnectivityError"
            }
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) for the connection status update.\n"
          }
        }
      },
      "BatteryStatus":{
        "required":[
          "percentage",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "percentage":{
            "maximum":100,
            "minimum":0,
            "type":"integer"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Battery Status Event was received by a Cloud Connector.\n"
          }
        }
      },
      "Temperature":{
        "required":[
          "isBackfilled",
          "samples",
          "updateTime",
          "value"
        ],
        "type":"object",
        "properties":{
          "value":{
            "type":"number",
            "description":"The temperature value in celsius.\n"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Temperature Event was received by a Cloud Connector.\n"
          },
          "samples":{
            "type":"array",
            "description":"A list of temperature samples and timestamps sampled since the previous heartbeat, ordered newest-to-oldest. \nIts length is equal to the configured samples per heartbeat, which is 1 by default. The first item in the array \nwill always have the same value as the outer `value` field.\n",
            "items":{
              "$ref":"#/components/schemas/Temperature_samples"
            }
          },
          "isBackfilled":{
            "type":"boolean",
            "description":"Indicates if the temperature event is backfilled. This feature is supported for \n[Temperature Probe Sensor](https://support.disruptive-technologies.com/hc/en-us/articles/11432439857948-Temperature-Probe-Sensor) \nsensors, and [Temperature Sensors with Data Backfill](https://support.disruptive-technologies.com/hc/en-us/articles/9389983018268-Temperature-Sensor).\nWhen this field is `true`, the temperature value was measured while the sensor was out of reach of an online Cloud Connector,\nand has been backfilled automatically after getting back online.\nSee the [Backfill page](https://support.disruptive-technologies.com/hc/en-us/articles/12707591585564-How-does-Data-Backfill-work)\nin our Help Center for more information about Data Backfill.\n"
          }
        }
      },
      "ObjectPresent":{
        "required":[
          "state",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "state":{
            "type":"string",
            "description":"`PRESENT` - An object is present on the sensor.\n`NOT_PRESENT` - No objects are present on the sensor.\n",
            "enum":[
              "PRESENT",
              "NOT_PRESENT"
            ]
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Object Present Event was received by a Cloud Connector.\n"
          }
        }
      },
      "Touch":{
        "required":[
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Touch Event was received by a Cloud Connector.\n"
          }
        }
      },
      "Humidity":{
        "required":[
          "relativeHumidity",
          "temperature",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "temperature":{
            "type":"number",
            "description":"The temperature in degrees Celsius.\n"
          },
          "relativeHumidity":{
            "type":"number",
            "description":"The relative humidity in percent.\n"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Humidity Event was received by a Cloud Connector.\n"
          }
        }
      },
      "TouchCount":{
        "required":[
          "total",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "total":{
            "type":"integer",
            "description":"The total number of touches registered through the lifetime of the sensor.\n"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Touch Count Event was received by a Cloud Connector.\n"
          }
        }
      },
      "ObjectPresentCount":{
        "required":[
          "total",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "total":{
            "type":"integer",
            "description":"Total number of times an object is put within or removed from the sensor over the lifetime of the sensor.\n"
          },
          "updateTime":{
            "type":"string",
            "description":"The (UTC) timestamp of when the Object Present Count Event was received by a Cloud Connector.\n"
          }
        }
      },
      "WaterPresent":{
        "required":[
          "state",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "state":{
            "type":"string",
            "description":"`PRESENT` - Water is present on the sensor.\n`NOT_PRESENT` - Water is not present on the sensor.\n",
            "enum":[
              "PRESENT",
              "NOT_PRESENT"
            ]
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Water Present Event was received by a Cloud Connector.\n"
          }
        }
      },
      "Motion":{
        "required":[
          "state",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "state":{
            "type":"string",
            "description":"`MOTION_DETECTED` - The motion sensor has detected motion.\n`NO_MOTION_DETECTED` - The motion sensor is no longer detecting motion.\n",
            "enum":[
              "MOTION_DETECTED",
              "NO_MOTION_DETECTED"
            ]
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Motion Event was received by a Cloud Connector.\n"
          }
        }
      },
      "Contact":{
        "required":[
          "state",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "state":{
            "type":"string",
            "description":"`OPEN` - The door or window is open.\n`CLOSED` - The door or window is closed.\n",
            "enum":[
              "OPEN",
              "CLOSED"
            ]
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Contact Event was received by a Cloud Connector.\n"
          }
        }
      },
      "ProbeWireStatus":{
        "required":[
          "state",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "state":{
            "type":"string",
            "description":"`INVALID_WIRE_CONFIGURATION` - Check the 'Safety & Use' leaflet or DT Studio for valid configurations.\n`TWO_WIRE` - Two wires are plugged into the probe sensor.\n`THREE_WIRE` - Three wires are plugged into the probe sensor.\n`FOUR_WIRE` - Four wires are plugged into the probe sensor.\n",
            "enum":[
              "INVALID_WIRE_CONFIGURATION",
              "TWO_WIRE",
              "THREE_WIRE",
              "FOUR_WIRE"
            ]
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Probe Wire Status Event was received by a Cloud Connector.\n"
          }
        },
        "description":"An event that is emitted by a probe `temperature` sensor when the number of wires plugged into the sensor changes.\n"
      },
      "DeskOccupancy":{
        "required":[
          "state",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "state":{
            "type":"string",
            "description":"`OCCUPIED` - The desk is currently occupied.\n`NOT_OCCUPIED` - The desk is no longer occupied.\n",
            "enum":[
              "OCCUPIED",
              "NOT_OCCUPIED"
            ]
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Desk Occupancy Event was received by a Cloud Connector.\n"
          },
          "remarks":{
            "type":"array",
            "description":"Additional information about the estimated `state` field.\n\nSee the [Events](https://developer.disruptive-technologies.com/docs/concepts/events#remarks) page\nin the Developer Docs for more information.\n",
            "items":{
              "type":"string"
            }
          }
        }
      },
      "CO2":{
        "required":[
          "ppm",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "ppm":{
            "type":"number",
            "description":"The amount of measured CO2 in PPM (Parts Per Million).\n"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the CO2 Event was received by a Cloud Connector.\n"
          }
        }
      },
      "Pressure":{
        "required":[
          "pascal",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "pascal":{
            "type":"number",
            "description":"Barometric pressure in pascal.\n"
          },
          "updateTime":{
            "type":"string",
            "description":"The timestamp (UTC) of when the Pressure Event was received by a Cloud Connector.\n"
          }
        }
      },
      "NextPageToken":{
        "type":"string",
        "description":"A token to use for retrieving the next page of results.\n\nNext result can be fetched using this value inside `pageToken` for the next call. If the field is empty there are no results.\n",
        "example":"c0un66ecie6seakamrlg"
      },
      "StreamEvent":{
        "required":[
          "result"
        ],
        "type":"object",
        "properties":{
          "result":{
            "$ref":"#/components/schemas/StreamEvent_result"
          }
        }
      },
      "Event":{
        "type":"object",
        "discriminator":{
          "propertyName":"eventType",
          "mapping":{
            "touch":"#/components/schemas/TouchEvent",
            "temperature":"#/components/schemas/TemperatureEvent",
            "objectPresent":"#/components/schemas/ObjectPresentEvent",
            "humidity":"#/components/schemas/HumidityEvent",
            "objectPresentCount":"#/components/schemas/ObjectPresentCountEvent",
            "touchCount":"#/components/schemas/TouchCountEvent",
            "waterPresent":"#/components/schemas/WaterPresentEvent",
            "co2":"#/components/schemas/CO2Event",
            "pressure":"#/components/schemas/PressureEvent",
            "motion":"#/components/schemas/MotionEvent",
            "contact":"#/components/schemas/ContactEvent",
            "probeWireStatus":"#/components/schemas/ProbeWireStatusEvent",
            "deskOccupancy":"#/components/schemas/DeskOccupancyEvent",
            "networkStatus":"#/components/schemas/NetworkStatusEvent",
            "batteryStatus":"#/components/schemas/BatteryStatusEvent",
            "labelsChanged":"#/components/schemas/LabelsChangedEvent",
            "connectionStatus":"#/components/schemas/ConnectionStatusEvent",
            "ethernetStatus":"#/components/schemas/EthernetStatusEvent",
            "cellularStatus":"#/components/schemas/CellularStatusEvent"
          }
        },
        "oneOf":[
          {
            "$ref":"#/components/schemas/TouchEvent"
          },
          {
            "$ref":"#/components/schemas/TemperatureEvent"
          },
          {
            "$ref":"#/components/schemas/ObjectPresentEvent"
          },
          {
            "$ref":"#/components/schemas/HumidityEvent"
          },
          {
            "$ref":"#/components/schemas/ObjectPresentCountEvent"
          },
          {
            "$ref":"#/components/schemas/TouchCountEvent"
          },
          {
            "$ref":"#/components/schemas/WaterPresentEvent"
          },
          {
            "$ref":"#/components/schemas/CO2Event"
          },
          {
            "$ref":"#/components/schemas/PressureEvent"
          },
          {
            "$ref":"#/components/schemas/MotionEvent"
          },
          {
            "$ref":"#/components/schemas/ContactEvent"
          },
          {
            "$ref":"#/components/schemas/ProbeWireStatusEvent"
          },
          {
            "$ref":"#/components/schemas/DeskOccupancyEvent"
          },
          {
            "$ref":"#/components/schemas/NetworkStatusEvent"
          },
          {
            "$ref":"#/components/schemas/BatteryStatusEvent"
          },
          {
            "$ref":"#/components/schemas/LabelsChangedEvent"
          },
          {
            "$ref":"#/components/schemas/ConnectionStatusEvent"
          },
          {
            "$ref":"#/components/schemas/EthernetStatusEvent"
          },
          {
            "$ref":"#/components/schemas/CellularStatusEvent"
          }
        ]
      },
      "HistoryEvent":{
        "type":"object",
        "discriminator":{
          "propertyName":"eventType",
          "mapping":{
            "touch":"#/components/schemas/TouchEvent",
            "temperature":"#/components/schemas/TemperatureEvent",
            "objectPresent":"#/components/schemas/ObjectPresentEvent",
            "humidity":"#/components/schemas/HumidityEvent",
            "objectPresentCount":"#/components/schemas/ObjectPresentCountEvent",
            "touchCount":"#/components/schemas/TouchCountEvent",
            "waterPresent":"#/components/schemas/WaterPresentEvent",
            "co2":"#/components/schemas/CO2Event",
            "pressure":"#/components/schemas/PressureEvent",
            "motion":"#/components/schemas/MotionEvent",
            "contact":"#/components/schemas/ContactEvent",
            "probeWireStatus":"#/components/schemas/ProbeWireStatusEvent",
            "deskOccupancy":"#/components/schemas/DeskOccupancyEvent",
            "networkStatus":"#/components/schemas/NetworkStatusEvent",
            "batteryStatus":"#/components/schemas/BatteryStatusEvent",
            "connectionStatus":"#/components/schemas/ConnectionStatusEvent",
            "ethernetStatus":"#/components/schemas/EthernetStatusEvent",
            "cellularStatus":"#/components/schemas/CellularStatusEvent"
          }
        },
        "oneOf":[
          {
            "$ref":"#/components/schemas/TouchEvent"
          },
          {
            "$ref":"#/components/schemas/TemperatureEvent"
          },
          {
            "$ref":"#/components/schemas/ObjectPresentEvent"
          },
          {
            "$ref":"#/components/schemas/HumidityEvent"
          },
          {
            "$ref":"#/components/schemas/ObjectPresentCountEvent"
          },
          {
            "$ref":"#/components/schemas/TouchCountEvent"
          },
          {
            "$ref":"#/components/schemas/WaterPresentEvent"
          },
          {
            "$ref":"#/components/schemas/CO2Event"
          },
          {
            "$ref":"#/components/schemas/PressureEvent"
          },
          {
            "$ref":"#/components/schemas/MotionEvent"
          },
          {
            "$ref":"#/components/schemas/ContactEvent"
          },
          {
            "$ref":"#/components/schemas/ProbeWireStatusEvent"
          },
          {
            "$ref":"#/components/schemas/DeskOccupancyEvent"
          },
          {
            "$ref":"#/components/schemas/NetworkStatusEvent"
          },
          {
            "$ref":"#/components/schemas/BatteryStatusEvent"
          },
          {
            "$ref":"#/components/schemas/ConnectionStatusEvent"
          },
          {
            "$ref":"#/components/schemas/EthernetStatusEvent"
          },
          {
            "$ref":"#/components/schemas/CellularStatusEvent"
          }
        ]
      },
      "EventID":{
        "type":"string",
        "description":"Unique identifier of the event.\n"
      },
      "EventLabels":{
        "type":"object",
        "additionalProperties":{
          "type":"string"
        },
        "description":"White-listed labels included from the target resource.\n"
      },
      "EventType":{
        "type":"string",
        "enum":[
          "touch",
          "temperature",
          "objectPresent",
          "humidity",
          "objectPresentCount",
          "touchCount",
          "waterPresent",
          "co2",
          "pressure",
          "motion",
          "contact",
          "probeWireStatus",
          "deskOccupancy",
          "networkStatus",
          "batteryStatus",
          "labelsChanged",
          "connectionStatus",
          "ethernetStatus",
          "cellularStatus"
        ]
      },
      "TouchEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "touch"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/TouchEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "TouchEventData":{
        "required":[
          "touch"
        ],
        "type":"object",
        "properties":{
          "touch":{
            "$ref":"#/components/schemas/Touch"
          }
        }
      },
      "TemperatureEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "temperature"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/TemperatureEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "TemperatureEventData":{
        "type":"object",
        "properties":{
          "temperature":{
            "$ref":"#/components/schemas/Temperature"
          }
        }
      },
      "ObjectPresentEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "objectPresent"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/ObjectPresentEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "ObjectPresentEventData":{
        "type":"object",
        "properties":{
          "objectPresent":{
            "$ref":"#/components/schemas/ObjectPresent"
          }
        }
      },
      "HumidityEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "humidity"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/HumidityEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "HumidityEventData":{
        "type":"object",
        "properties":{
          "humidity":{
            "$ref":"#/components/schemas/Humidity"
          }
        }
      },
      "TouchCountEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "touchCount"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/TouchCountEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "TouchCountEventData":{
        "type":"object",
        "properties":{
          "touchCount":{
            "$ref":"#/components/schemas/TouchCount"
          }
        }
      },
      "ObjectPresentCountEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "objectPresentCount"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/ObjectPresentCountEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "ObjectPresentCountEventData":{
        "type":"object",
        "properties":{
          "objectPresentCount":{
            "$ref":"#/components/schemas/ObjectPresentCount"
          }
        }
      },
      "WaterPresentEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "waterPresent"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/WaterPresentEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "WaterPresentEventData":{
        "type":"object",
        "properties":{
          "waterPresent":{
            "$ref":"#/components/schemas/WaterPresent"
          }
        }
      },
      "MotionEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "motion"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/MotionEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "MotionEventData":{
        "type":"object",
        "properties":{
          "motion":{
            "$ref":"#/components/schemas/Motion"
          }
        }
      },
      "ContactEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "contact"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/ContactEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "ContactEventData":{
        "type":"object",
        "properties":{
          "contact":{
            "$ref":"#/components/schemas/Contact"
          }
        }
      },
      "ProbeWireStatusEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "probeWireStatus"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/ProbeWireStatusEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "ProbeWireStatusEventData":{
        "type":"object",
        "properties":{
          "probeWireStatus":{
            "$ref":"#/components/schemas/ProbeWireStatus"
          }
        }
      },
      "DeskOccupancyEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "deskOccupancy"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/DeskOccupancyEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "DeskOccupancyEventData":{
        "type":"object",
        "properties":{
          "deskOccupancy":{
            "$ref":"#/components/schemas/DeskOccupancy"
          }
        }
      },
      "CO2Event":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "co2"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/CO2EventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "CO2EventData":{
        "type":"object",
        "properties":{
          "co2":{
            "$ref":"#/components/schemas/CO2"
          }
        }
      },
      "PressureEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "pressure"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/PressureEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "PressureEventData":{
        "type":"object",
        "properties":{
          "pressure":{
            "$ref":"#/components/schemas/Pressure"
          }
        }
      },
      "BatteryStatusEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "batteryStatus"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/BatteryStatusEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "BatteryStatusEventData":{
        "type":"object",
        "properties":{
          "batteryStatus":{
            "$ref":"#/components/schemas/BatteryStatus"
          }
        }
      },
      "NetworkStatusEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "networkStatus"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/NetworkStatusEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "NetworkStatusEventData":{
        "type":"object",
        "properties":{
          "networkStatus":{
            "$ref":"#/components/schemas/NetworkStatus"
          }
        }
      },
      "ConnectionStatusEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "connectionStatus"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/ConnectionStatusEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        },
        "description":"An event that is emitted by a Sensor or Cloud Connector when the connection status changes.\nThis will typically be when the device goes offline or comes back online, but for Cloud Connectors\nit can also be sent when the connection goes from Ethernet to Cellular or vice versa.\n"
      },
      "ConnectionStatusEventData":{
        "type":"object",
        "properties":{
          "connectionStatus":{
            "$ref":"#/components/schemas/ConnectionStatus"
          }
        }
      },
      "EthernetStatusEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "ethernetStatus"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/EthernetStatusEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "EthernetStatusEventData":{
        "type":"object",
        "properties":{
          "ethernetStatus":{
            "$ref":"#/components/schemas/EthernetStatus"
          }
        }
      },
      "CellularStatusEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "cellularStatus"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/CellularStatusEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          }
        }
      },
      "CellularStatusEventData":{
        "type":"object",
        "properties":{
          "cellularStatus":{
            "$ref":"#/components/schemas/CellularStatus"
          }
        }
      },
      "LabelsChangedEvent":{
        "required":[
          "data",
          "eventId",
          "eventType",
          "targetName",
          "timestamp"
        ],
        "type":"object",
        "properties":{
          "eventType":{
            "type":"string",
            "enum":[
              "labelsChanged"
            ]
          },
          "eventId":{
            "$ref":"#/components/schemas/EventID"
          },
          "targetName":{
            "type":"string",
            "description":"The resource name of the related object.\n\nFormat is \"projects/{project}/devices/{device}\"\n"
          },
          "data":{
            "$ref":"#/components/schemas/LabelsChangedEventData"
          },
          "timestamp":{
            "$ref":"#/components/schemas/Timestamp"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "LabelsChangedEventData":{
        "type":"object",
        "properties":{
          "added":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of Label key-value pairs added to the Sensor.\n"
          },
          "modified":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Map of Label key-value pairs modified on the Sensor.\n"
          },
          "removed":{
            "type":"array",
            "description":"List of Labels that have been removed.\n",
            "items":{
              "type":"string"
            }
          }
        }
      },
      "Label":{
        "required":[
          "key",
          "name",
          "value"
        ],
        "type":"object",
        "properties":{
          "name":{
            "type":"string",
            "description":"The full resource name of the Device Label.\n",
            "readOnly":true,
            "example":"projects/{project}/devices/{sensor}/labels/{key}"
          },
          "key":{
            "type":"string",
            "description":"The key of the Device Label.\n",
            "readOnly":true,
            "example":"example_key"
          },
          "value":{
            "type":"string",
            "description":"The value of the Device Label.\n",
            "example":"example_value"
          }
        }
      },
      "NewLabel":{
        "required":[
          "key",
          "value"
        ],
        "type":"object",
        "properties":{
          "key":{
            "type":"string",
            "description":"The key of the Device Label.\n",
            "example":"example_key"
          },
          "value":{
            "type":"string",
            "description":"The value of the Device Label.\n",
            "example":"example_value"
          }
        }
      },
      "DataConnectorID":{
        "type":"string",
        "description":"The identifier of the Data Connector.\n"
      },
      "DataConnector":{
        "required":[
          "httpConfig",
          "name",
          "type"
        ],
        "type":"object",
        "properties":{
          "name":{
            "type":"string",
            "description":"The resource name of the Data Connector.\n\nFormat is `projects/{project}/dataconnectors/{connector}`\n",
            "readOnly":true,
            "example":"projects/b7s3umd0fee000ba5di0/dataconnectors/b8n61epb54j0008bnjm0"
          },
          "displayName":{
            "type":"string",
            "description":"The name to display for the data connector.\n",
            "example":"Building 14F FacilityManagement data stream"
          },
          "type":{
            "type":"string",
            "description":"Type of connector.\n\n- `HTTP_PUSH` - The connector will deliver events over HTTP Push.\n",
            "readOnly":true,
            "example":"HTTP_PUSH",
            "enum":[
              "HTTP_PUSH"
            ]
          },
          "status":{
            "type":"string",
            "description":"Current status of the connector.\n\n- `ACTIVE` - Currently active and serving.\n- `USER_DISABLED` - No longer active. Disabled by the user.\n- `SYSTEM_DISABLED` - No longer active. Disabled by the system.\n",
            "example":"ACTIVE",
            "enum":[
              "ACTIVE",
              "USER_DISABLED",
              "SYSTEM_DISABLED"
            ]
          },
          "events":{
            "type":"array",
            "description":"Events to listen on. Empty list is equal to all events.\n",
            "example":[
              "touch",
              "objectPresent"
            ],
            "items":{
              "$ref":"#/components/schemas/EventType"
            }
          },
          "labels":{
            "type":"array",
            "description":"Label keys to include in the event payload.\n",
            "example":[
              "buildingId"
            ],
            "items":{
              "type":"string"
            }
          },
          "httpConfig":{
            "$ref":"#/components/schemas/DataConnector_httpConfig"
          }
        }
      },
      "NewDataConnector":{
        "required":[
          "displayName",
          "httpConfig"
        ],
        "type":"object",
        "properties":{
          "displayName":{
            "type":"string",
            "description":"The display name for the new Data Connector.\n"
          },
          "type":{
            "type":"string",
            "description":"Type of Data Connector.\n\n- `HTTP_PUSH` - A Data Connector that will send HTTP POST request to a specific URL.\n",
            "enum":[
              "HTTP_PUSH"
            ]
          },
          "status":{
            "type":"string",
            "description":"Current status of the Data Connector.\n\n- `ACTIVE` - Currently active and sending events.\n- `USER_DISABLED` - No longer active. Disabled by the user.\n",
            "enum":[
              "ACTIVE",
              "USER_DISABLED"
            ]
          },
          "events":{
            "type":"array",
            "description":"Events to listen on. Empty list is equal to all events.\n",
            "items":{
              "$ref":"#/components/schemas/EventType"
            }
          },
          "labels":{
            "type":"array",
            "description":"Device Label keys to include in the event payload.\n",
            "items":{
              "type":"string"
            }
          },
          "httpConfig":{
            "$ref":"#/components/schemas/NewDataConnector_httpConfig"
          }
        }
      },
      "DataConnectorMessage":{
        "required":[
          "event",
          "labels"
        ],
        "type":"object",
        "properties":{
          "event":{
            "$ref":"#/components/schemas/Event"
          },
          "labels":{
            "$ref":"#/components/schemas/EventLabels"
          }
        }
      },
      "DataConnectorMetrics":{
        "required":[
          "errorCount",
          "latency99p",
          "successCount"
        ],
        "type":"object",
        "properties":{
          "successCount":{
            "type":"integer",
            "description":"Number of successfully processed events within the last 3 hours.\n",
            "example":21
          },
          "errorCount":{
            "type":"integer",
            "description":"Number of failed processed events within the last 3 hours.\n",
            "example":2
          },
          "latency99p":{
            "type":"string",
            "description":"The 99th percentile latency of events sent within the last 3 hours.\n",
            "example":"0.362s"
          }
        }
      },
      "OrganizationIDForPath":{
        "type":"string",
        "description":"The identifier of a Organization.\n"
      },
      "Organization":{
        "required":[
          "displayName",
          "name"
        ],
        "type":"object",
        "properties":{
          "name":{
            "type":"string",
            "description":"The resource name of the Organization.\n\nFormat is `organizations/{organization}`.\n",
            "example":"organizations/b8ntihoaplm0028st07g"
          },
          "displayName":{
            "type":"string",
            "description":"The display name of the Organization.\n",
            "example":"IoT Monitoring Inc."
          }
        }
      },
      "RoleName":{
        "type":"string",
        "description":"The resource name of the Role.\n\nFormat is `roles/{role}`.\n",
        "example":"roles/project.admin"
      },
      "RoleID":{
        "type":"string",
        "description":"The identifier of the Role (eg. `project.admin`).\n",
        "example":"project.admin"
      },
      "Role":{
        "required":[
          "description",
          "displayName",
          "name",
          "permissions"
        ],
        "type":"object",
        "properties":{
          "name":{
            "$ref":"#/components/schemas/RoleName"
          },
          "displayName":{
            "type":"string",
            "description":"The name to display for the given Role.\n"
          },
          "description":{
            "type":"string",
            "description":"Description of the Role.\n"
          },
          "permissions":{
            "type":"array",
            "description":"Permissions allowed by the Role.",
            "items":{
              "type":"string"
            }
          }
        }
      },
      "OrganizationPermissionList":{
        "required":[
          "permissions"
        ],
        "type":"object",
        "properties":{
          "permissions":{
            "type":"array",
            "description":"List of permissions that defines which actions are allowed for a given organization.\n",
            "items":{
              "type":"string"
            }
          }
        }
      },
      "ProjectPermissionList":{
        "required":[
          "permissions"
        ],
        "type":"object",
        "properties":{
          "permissions":{
            "type":"array",
            "description":"List of permissions that defines which actions are allowed for a given project.\n",
            "items":{
              "type":"string"
            }
          }
        }
      },
      "MemberName":{
        "type":"string",
        "description":"The resource name of the Member.\n\nFormat is one of:\n- `organizations/{organization_id}/members/{member_id}`\n- `projects/{project_id}/members/{member_id}`\n",
        "readOnly":true,
        "example":"projects/bpotd75ufmde03ajo8fa/members/bpoubfs24sg000b24vd0"
      },
      "Member":{
        "required":[
          "accountType",
          "createTime",
          "displayName",
          "email",
          "name",
          "roles",
          "status"
        ],
        "type":"object",
        "properties":{
          "name":{
            "$ref":"#/components/schemas/MemberName"
          },
          "displayName":{
            "type":"string",
            "description":"The display name for the Member.\n\nWill be email for User accounts and set display name for Service Accounts.\n",
            "readOnly":true,
            "example":"user@example.com"
          },
          "roles":{
            "type":"array",
            "description":"The resource names of the Roles attached to the membership.\n\nFormat is `roles/{role}`.\n",
            "items":{
              "$ref":"#/components/schemas/RoleName"
            }
          },
          "status":{
            "type":"string",
            "description":"- `PENDING` - Pending on the User to acknowledge the Membership. The UI can use this to indicate that the Member is not yet active.\n- `ACCEPTED` - User has accepted the Membership. Will always be the status for Service Account Memberships.\n",
            "readOnly":true,
            "enum":[
              "PENDING",
              "ACCEPTED"
            ]
          },
          "email":{
            "type":"string",
            "description":"The email of the Account linked to the Member.\n",
            "readOnly":true,
            "example":"user@example.com"
          },
          "accountType":{
            "type":"string",
            "description":"- `USER` - Indicates that the Account linked to the Member is a User Account.\n- `SERVICE_ACCOUNT` - Indicates that the Account linked to the Member is a Service Account.\n",
            "readOnly":true,
            "enum":[
              "USER",
              "SERVICE_ACCOUNT"
            ]
          },
          "createTime":{
            "type":"string",
            "description":"When the Member was created.",
            "readOnly":true,
            "example":"2021-03-03T10:33:27.668452Z"
          }
        }
      },
      "MemberID":{
        "type":"string",
        "description":"The identifier of the Member.\n"
      },
      "ProjectName":{
        "type":"string",
        "description":"The resource name of the Project\n\nFormat is `projects/{project}`.\n",
        "readOnly":true,
        "example":"projects/b7s3e550fee000ba5dhg"
      },
      "ProjectID":{
        "type":"string",
        "description":"The identifier of a Project.\n"
      },
      "Project":{
        "required":[
          "cloudConnectorCount",
          "displayName",
          "inventory",
          "name",
          "organization",
          "organizationDisplayName",
          "sensorCount"
        ],
        "type":"object",
        "properties":{
          "name":{
            "$ref":"#/components/schemas/ProjectName"
          },
          "displayName":{
            "type":"string",
            "description":"The display name of the Project.\n",
            "example":"Water Lane 45, 4th floor"
          },
          "inventory":{
            "type":"boolean",
            "description":"All Organizations have a single inventory Project.\n",
            "readOnly":true,
            "example":false
          },
          "organization":{
            "type":"string",
            "description":"The Organization owning the Project.\n\nFormat is `organizations/{organization}`.\n",
            "readOnly":true,
            "example":"organizations/b8ntihoaplm0028st07g"
          },
          "organizationDisplayName":{
            "type":"string",
            "description":"The Organization display name.\n",
            "readOnly":true,
            "example":"IoT Monitoring Inc."
          },
          "sensorCount":{
            "type":"integer",
            "description":"The number of sensors within the Project.\n",
            "readOnly":true,
            "example":6
          },
          "cloudConnectorCount":{
            "type":"integer",
            "description":"The number of Cloud Connectors within the Project.\n",
            "readOnly":true,
            "example":9
          }
        }
      },
      "ServiceAccountEmail":{
        "type":"string",
        "description":"An automatically generated email address for the Service Account. Use this email\nto give the Service Account access to Projects and Organizations by adding it \nas a Member.\n\nFormat is: `{service_account_id}@{parent_project_id}.serviceaccount.d21s.com`.\n",
        "readOnly":true,
        "example":"bpoubfs24sg000b24vd0@bpotd75ufmde03ajo8fa.serviceaccount.d21s.com"
      },
      "ServiceAccount":{
        "required":[
          "createTime",
          "displayName",
          "email",
          "enableBasicAuth",
          "name",
          "updateTime"
        ],
        "type":"object",
        "properties":{
          "name":{
            "type":"string",
            "description":"The resource name of the Service Account\n\nFormat is `projects/{project}/serviceaccounts/{serviceaccount}`.\n",
            "readOnly":true,
            "example":"projects/bpotd75ufmde03ajo8fa/serviceaccounts/bpoubfs24sg000b24vd0"
          },
          "email":{
            "$ref":"#/components/schemas/ServiceAccountEmail"
          },
          "displayName":{
            "type":"string",
            "description":"The display name of the service account.\n",
            "example":"Test account"
          },
          "enableBasicAuth":{
            "type":"boolean",
            "description":"If true, this account will accept using the secret as a password in basic auth.\n\nThis is not recommended for production use, but may make it easier\nto get prototypes quickly up and running.\n",
            "example":false
          },
          "createTime":{
            "type":"string",
            "description":"When the service account was created",
            "readOnly":true,
            "example":"2021-03-01T21:53:29.959615Z"
          },
          "updateTime":{
            "type":"string",
            "description":"When the service account was last updated",
            "readOnly":true,
            "example":"2021-03-01T21:53:30.043631Z"
          }
        },
        "description":"Account representing a computer system that can be granted Membership to Projects and Organizations.\n"
      },
      "NewServiceAccount":{
        "required":[
          "displayName",
          "enableBasicAuth"
        ],
        "type":"object",
        "properties":{
          "displayName":{
            "type":"string",
            "description":"The display name of the Service Account.\n",
            "example":"Test account"
          },
          "enableBasicAuth":{
            "type":"boolean",
            "description":"If true, this account will accept using the secret as a password in basic auth.\n\nThis is not recommended for production use, but may make it easier\nto get prototypes quickly up and running.\n",
            "example":false
          }
        },
        "description":"Account representing a program that can be granted Membership to Projects and Organizations.\n"
      },
      "ServiceAccountKey":{
        "required":[
          "createTime",
          "id",
          "name"
        ],
        "type":"object",
        "properties":{
          "name":{
            "type":"string",
            "description":"The resource name of the Service Account Key\n\nFormat is `projects/{project}/serviceaccounts/{serviceaccount}/keys/{serviceaccountkey}`.          \n",
            "example":"projects/c0una36cie6sgjl52rq0/serviceaccounts/c0una5ecie6sglgr76sg/keys/c0una5mcie6sgne3uktg"
          },
          "id":{
            "type":"string",
            "description":"The unique identifier of the Key.\n\nIf the Service Account accepts Basic Auth, the identifier will be used as user \nname in the request.\n",
            "example":"c0una8mcie6sgr3qici0"
          },
          "createTime":{
            "type":"string",
            "description":"When the Service Account Key was created.",
            "example":"2021-03-01T21:53:29.959615Z"
          }
        },
        "description":"A Key grants access to act as the Service Account the Key belongs to.\n\nThe secret of a Service Account Key is only returned once on creation of\nthe key, and cannot be recreated or downloaded later.\n"
      },
      "ServiceAccountKeyWithSecret":{
        "required":[
          "key",
          "secret"
        ],
        "type":"object",
        "properties":{
          "key":{
            "$ref":"#/components/schemas/ServiceAccountKey"
          },
          "secret":{
            "type":"string",
            "description":"The secret for the created key.\n\nThis will only be returned once and cannot be recreated or retrieved later.\n",
            "example":"fd0274ef580b4986a16b99109e6965e3"
          }
        },
        "description":"A Key grants access to act as the Service Account the key belongs to.\n\nThe Secret of a Service Account Key is only returned once on creation of\nthe Key, and cannot be recreated or downloaded later.\n"
      },
      "UserEmail":{
        "type":"string",
        "example":"user@company.com"
      },
      "Status":{
        "required":[
          "code",
          "message"
        ],
        "type":"object",
        "properties":{
          "code":{
            "type":"string",
            "description":"The error code of the failed operation.\n\nAvailable error codes:\n * `INVALID_ARGUMENT` - Invalid argument specified for the operation.\n * `NOT_FOUND` - The resource does not exists.\n * `INTERNAL_ERROR` - An internal error caused the operation to fail. Retriable.\n",
            "enum":[
              "INVALID_ARGUMENT",
              "NOT_FOUND",
              "INTERNAL_ERROR"
            ]
          },
          "message":{
            "type":"string",
            "description":"A developer-facing error message in English.\n"
          }
        },
        "description":"Status provides the failure status of an operation.\n"
      },
      "Timestamp":{
        "type":"string",
        "description":"The timestamp (UTC) of when the event was received by a Cloud Connector. \n"
      },
      "SensorID":{
        "type":"string"
      },
      "ClaimInfoResponseDevice":{
        "required":[
          "device",
          "type"
        ],
        "type":"object",
        "properties":{
          "type":{
            "type":"string",
            "description":"Will always be \"DEVICE\" when the request was for a device identifier.\n",
            "enum":[
              "DEVICE"
            ]
          },
          "device":{
            "$ref":"#/components/schemas/ClaimDevice"
          }
        },
        "description":"The response object when the identifier in the request to `/claimInfo`\nwas for a device.\n"
      },
      "ClaimInfoResponseKit":{
        "required":[
          "kit",
          "type"
        ],
        "type":"object",
        "properties":{
          "type":{
            "type":"string",
            "description":"Will always be \"KIT\" when the request was for a kit identifier.\n",
            "enum":[
              "KIT"
            ]
          },
          "kit":{
            "$ref":"#/components/schemas/ClaimKit"
          }
        },
        "description":"The response object when the identifier in the request to `/claimInfo`\nwas for a kit.\n"
      },
      "ClaimDevice":{
        "type":"object",
        "properties":{
          "deviceId":{
            "type":"string",
            "description":"The identifier of the device.\n"
          },
          "deviceType":{
            "type":"string",
            "description":"The device type (eg. `temperature`). See our \n[Device Types](https://developer.disruptive-technologies.com/docs/concepts/devices) \npage for all possible values.\n"
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the device. This is the same product number that can \nbe found on the support pages for both \n[Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors).\n"
          },
          "isClaimed":{
            "type":"boolean",
            "description":"Whether the device was already claimed. If this is true, you will \nreceive an ALREADY_CLAIMED error when attempting to claim it.\n"
          }
        }
      },
      "ClaimKit":{
        "type":"object",
        "properties":{
          "kitId":{
            "type":"string",
            "description":"The identifier of the kit that was requested. In this case, \nit will be the same as the identifier in the request.\n"
          },
          "displayName":{
            "type":"string",
            "description":"The display name of the kit. This is the same as the name on the \nprinted sticker on the kit box.\n"
          },
          "devices":{
            "type":"array",
            "description":"An array of the devices contained in the kit. Each item in \nthe array is a device object.\n",
            "items":{
              "$ref":"#/components/schemas/ClaimDevice"
            }
          }
        }
      },
      "inline_response_200":{
        "required":[
          "devices"
        ],
        "type":"object",
        "properties":{
          "devices":{
            "type":"array",
            "description":"A list of Devices.\n",
            "items":{
              "$ref":"#/components/schemas/Device"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "project_devicesbatchUpdate_body":{
        "type":"object",
        "properties":{
          "devices":{
            "type":"array",
            "description":"List of device resource names to be updated. A maximum of 100 devices \nare allowed per request.\n",
            "items":{
              "type":"string"
            }
          },
          "addLabels":{
            "type":"object",
            "additionalProperties":{
              "type":"string"
            }
          },
          "removeLabels":{
            "type":"array",
            "description":"List of label keys that should be removed.\n\nIf a label does not exist in some (or any) of the devices, the operation \nwill still succeed with status code 200.\n",
            "items":{
              "type":"string"
            }
          }
        }
      },
      "inline_response_200_1":{
        "type":"object",
        "properties":{
          "batchErrors":{
            "type":"array",
            "description":"List of partial failures, one for each device in the request that failed processing.\n",
            "items":{
              "$ref":"#/components/schemas/inline_response_200_1_batchErrors"
            }
          }
        }
      },
      "inline_response_200_2":{
        "required":[
          "events",
          "nextPageToken"
        ],
        "type":"object",
        "properties":{
          "events":{
            "type":"array",
            "description":"A list of events.\n",
            "items":{
              "$ref":"#/components/schemas/HistoryEvent"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "labels_label_body":{
        "type":"object",
        "properties":{
          "value":{
            "type":"string",
            "description":"The new value to set for the existing label.\n"
          }
        },
        "example":{
          "value":"new_label_value"
        }
      },
      "project_devicestransfer_body":{
        "type":"object",
        "properties":{
          "devices":{
            "type":"array",
            "description":"List of device resource names to be transferred.\n",
            "items":{
              "type":"string"
            }
          }
        },
        "example":{
          "devices":[
            "projects/<source_project_id>/devices/<device_id_1>",
            "projects/<source_project_id>/devices/<device_id_2>",
            "projects/<source_project_id>/devices/<device_id_3>"
          ]
        }
      },
      "inline_response_200_3":{
        "type":"object",
        "properties":{
          "transferredDevices":{
            "type":"array",
            "description":"List of devices that was successfully transferred.\n",
            "items":{
              "type":"string"
            }
          },
          "transferErrors":{
            "type":"array",
            "description":"List of partial failures, one for each device in the request that failed processing.\n",
            "items":{
              "$ref":"#/components/schemas/inline_response_200_1_batchErrors"
            }
          }
        }
      },
      "inline_response_200_4":{
        "required":[
          "dataConnectors",
          "nextPageToken"
        ],
        "type":"object",
        "properties":{
          "dataConnectors":{
            "type":"array",
            "description":"A list of Data Connectors.\n",
            "items":{
              "$ref":"#/components/schemas/DataConnector"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "inline_response_200_5":{
        "type":"object",
        "properties":{
          "metrics":{
            "$ref":"#/components/schemas/DataConnectorMetrics"
          }
        }
      },
      "inline_response_200_6":{
        "required":[
          "nextPageToken",
          "roles"
        ],
        "type":"object",
        "properties":{
          "roles":{
            "type":"array",
            "description":"A list of Roles.\n",
            "items":{
              "$ref":"#/components/schemas/Role"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "inline_response_200_7":{
        "required":[
          "nextPageToken",
          "organizations"
        ],
        "type":"object",
        "properties":{
          "organizations":{
            "type":"array",
            "description":"A list of Organizations.\n",
            "items":{
              "$ref":"#/components/schemas/Organization"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "organization_members_body":{
        "required":[
          "email",
          "roles"
        ],
        "type":"object",
        "properties":{
          "roles":{
            "type":"array",
            "description":"The resource names of the Roles attached to the membership.\n\nFormat is `roles/{role}`.  Available roles can be found via the `/roles` endpoint.\n",
            "example":[
              "roles/organization.admin"
            ],
            "items":{
              "$ref":"#/components/schemas/RoleName"
            }
          },
          "email":{
            "type":"string",
            "description":"The email address of the account linked to the membership.\n",
            "example":"user@company.com"
          }
        }
      },
      "inline_response_200_8":{
        "type":"object",
        "properties":{
          "inviteUrl":{
            "type":"string",
            "description":"The invite URL.\n",
            "example":"https://identity.d21s.com/account/invite/..."
          }
        }
      },
      "inline_response_200_9":{
        "required":[
          "nextPageToken",
          "projects"
        ],
        "type":"object",
        "properties":{
          "projects":{
            "type":"array",
            "description":"A list of Projects.\n",
            "items":{
              "$ref":"#/components/schemas/Project"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "projects_body":{
        "required":[
          "displayName",
          "organization"
        ],
        "properties":{
          "displayName":{
            "type":"string",
            "description":"The display name of the Project.\n",
            "example":"Water Lane 45, 4th floor"
          },
          "organization":{
            "type":"string",
            "description":"The resource name of the organization to own the project.\n",
            "example":"organizations/b8ntihoaplm0028st07g"
          }
        }
      },
      "project_members_body":{
        "required":[
          "email",
          "roles"
        ],
        "type":"object",
        "properties":{
          "roles":{
            "type":"array",
            "description":"The resource names of the Roles attached to the membership.\n\nFormat is `roles/{role}`. Available roles can be found via the `/roles` endpoint.\n",
            "example":[
              "roles/project.user"
            ],
            "items":{
              "$ref":"#/components/schemas/RoleName"
            }
          },
          "email":{
            "type":"string",
            "description":"Email for the user to grant access.\n",
            "example":"user@company.com"
          }
        }
      },
      "inline_response_200_10":{
        "required":[
          "nextPageToken",
          "serviceAccounts"
        ],
        "type":"object",
        "properties":{
          "serviceAccounts":{
            "type":"array",
            "description":"A list of Service Accounts.\n",
            "items":{
              "$ref":"#/components/schemas/ServiceAccount"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "inline_response_200_11":{
        "required":[
          "keys",
          "nextPageToken"
        ],
        "type":"object",
        "properties":{
          "keys":{
            "type":"array",
            "description":"A list of Service Account Keys.\n",
            "items":{
              "$ref":"#/components/schemas/ServiceAccountKey"
            }
          },
          "nextPageToken":{
            "$ref":"#/components/schemas/NextPageToken"
          }
        }
      },
      "inline_response_200_12":{
        "type":"object",
        "discriminator":{
          "propertyName":"type",
          "mapping":{
            "DEVICE":"#/components/schemas/ClaimInfoResponseDevice",
            "KIT":"#/components/schemas/ClaimInfoResponseKit"
          }
        },
        "oneOf":[
          {
            "$ref":"#/components/schemas/ClaimInfoResponseDevice"
          },
          {
            "$ref":"#/components/schemas/ClaimInfoResponseKit"
          }
        ]
      },
      "project_devicesclaim_body":{
        "type":"object",
        "properties":{
          "kitIds":{
            "type":"array",
            "description":"An array of kit identifiers",
            "items":{
              "type":"string"
            }
          },
          "deviceIds":{
            "type":"array",
            "description":"An array of device identifiers",
            "items":{
              "type":"string"
            }
          }
        },
        "example":{
          "kitIds":[
            "cro-90-txq",
            "gco-78-pru"
          ],
          "deviceIds":[
            "cc1493a87d5kgjuk8gg0"
          ]
        }
      },
      "inline_response_200_13":{
        "type":"object",
        "properties":{
          "claimedDevices":{
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/inline_response_200_13_claimedDevices"
            }
          },
          "claimErrors":{
            "$ref":"#/components/schemas/inline_response_200_13_claimErrors"
          }
        }
      },
      "Temperature_samples":{
        "type":"object",
        "properties":{
          "value":{
            "type":"number",
            "description":"The temperature value in celsius.\n"
          },
          "sampleTime":{
            "type":"string",
            "description":"The sampleTime (UTC) is estimated by DT Cloud. The samples within the `samples` array will be evenly distributed\nin time since the last heartbeat of the sensor. The first item in the array will be equivalent to the outer `updateTime`\nof the event, which is the timestamp of when the Temperature Event was received by a Cloud Connector.\n"
          }
        }
      },
      "StreamEvent_result":{
        "required":[
          "event"
        ],
        "type":"object",
        "properties":{
          "event":{
            "$ref":"#/components/schemas/Event"
          }
        }
      },
      "DataConnector_httpConfig":{
        "type":"object",
        "properties":{
          "url":{
            "type":"string",
            "description":"Valid URL using HTTPS.\n",
            "example":"https://www.buildingmanagementrus.com/eventReception/events.dll?ETL=yes"
          },
          "signatureSecret":{
            "type":"string",
            "description":"Use a custom secret to sign the data.\n",
            "example":"SignEachMessageWithThisSecret"
          },
          "headers":{
            "maxProperties":10,
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"HTTP headers to include in outgoing Data Connector requests.\n",
            "example":{
              "authorization":"CustomAuthorizationHeader"
            }
          }
        },
        "description":"Configuration settings for HTTP connectors.\n"
      },
      "NewDataConnector_httpConfig":{
        "type":"object",
        "properties":{
          "url":{
            "type":"string",
            "description":"URL the Data Connector will send HTTPS POST requests to.\n"
          },
          "signatureSecret":{
            "type":"string",
            "description":"Use a custom secret to sign the data.\n"
          },
          "headers":{
            "maxProperties":10,
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"HTTP headers to include in outgoing Data Connector requests.\n"
          }
        },
        "description":"Configuration settings for HTTP push Data Connectors\n"
      },
      "inline_response_200_1_batchErrors":{
        "type":"object",
        "properties":{
          "device":{
            "type":"string",
            "description":"Resource name of the device on which the operation failed.\n"
          },
          "status":{
            "$ref":"#/components/schemas/Status"
          }
        }
      },
      "inline_response_200_13_claimedDevices":{
        "type":"object",
        "properties":{
          "deviceId":{
            "type":"string",
            "description":"The identifier of the claimed device.\n"
          },
          "deviceType":{
            "type":"string",
            "description":"The device type of the claimed device (eg. `temperature`). See our \n[Device Types](https://developer.disruptive-technologies.com/docs/concepts/devices) \npage for all possible values.\n"
          },
          "productNumber":{
            "type":"string",
            "description":"The product number of the claimed device. This is the same product number that can \nbe found on the support pages for both \n[Sensors](https://support.disruptive-technologies.com/hc/en-us/sections/360003211399-Sensors) and [Cloud Connectors](https://support.disruptive-technologies.com/hc/en-us/sections/360003168340-Cloud-Connectors).\n"
          },
          "isClaimed":{
            "type":"boolean",
            "description":"Since the device was just claimed, this will always be `true`. It's included \nonly to make the data structure consistent with the `/claimInfo` endpoint.\n"
          }
        }
      },
      "inline_response_200_13_claimErrors_devices":{
        "type":"object",
        "properties":{
          "deviceId":{
            "type":"string",
            "description":"The identifier of the device that failed to be claimed."
          },
          "code":{
            "type":"string",
            "description":"If it's `NOT_FOUND`, a device in the `deviceIds` list in the request couldn't be found.\nIf it's `ALREADY_CLAIMED`, either one of the devices in `kitIds` or in `deviceIds` of\nthe request was already claimed (`isClaimed` was `true`).\n",
            "enum":[
              "NOT_FOUND",
              "ALREADY_CLAIMED"
            ]
          },
          "message":{
            "type":"string",
            "description":"A user presentable error message of why this specific device couldn't be claimed."
          }
        }
      },
      "inline_response_200_13_claimErrors_kits":{
        "type":"object",
        "properties":{
          "kitIds":{
            "type":"string",
            "description":"The identifier of the kit that failed to be claimed."
          },
          "code":{
            "type":"string",
            "description":"When the error code is `NOT_FOUND` it means that a kit in `kitIds` \nin the request couldn't be found.\n",
            "enum":[
              "NOT_FOUND"
            ]
          },
          "message":{
            "type":"string",
            "description":"A user presentable error message of why devices in this specific kit couldn't be claimed."
          }
        }
      },
      "inline_response_200_13_claimErrors":{
        "type":"object",
        "properties":{
          "devices":{
            "type":"array",
            "description":"A list claim errors for specific devices.",
            "items":{
              "$ref":"#/components/schemas/inline_response_200_13_claimErrors_devices"
            }
          },
          "kits":{
            "type":"array",
            "description":"A list of claim errors for specific kits.",
            "items":{
              "$ref":"#/components/schemas/inline_response_200_13_claimErrors_kits"
            }
          }
        }
      }
    },
    "responses":{
      "ListMembersResponse":{
        "description":"Got list of members.",
        "content":{
          "application/json":{
            "schema":{
              "required":[
                "members",
                "nextPageToken"
              ],
              "type":"object",
              "properties":{
                "members":{
                  "type":"array",
                  "description":"A list of members.\n",
                  "items":{
                    "$ref":"#/components/schemas/Member"
                  }
                },
                "nextPageToken":{
                  "$ref":"#/components/schemas/NextPageToken"
                }
              }
            }
          }
        }
      }
    },
    "parameters":{
      "AuthToken":{
        "name":"token",
        "in":"query",
        "description":"An optional way of authenticating, that doesn't use the `authorization` HTTP header, \nis to pass the access token as a parameter.\n\nThis is especially useful for the `:stream` endpoints, as some Server Sent Events \nlibraries does not allow one to modify the HTTP request, namely JavaScript's `EventSource`.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "ProjectID":{
        "name":"project",
        "in":"path",
        "description":"The identifier of the Project.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "$ref":"#/components/schemas/ProjectID"
        }
      },
      "ProjectIDWithWildcard":{
        "name":"project",
        "in":"path",
        "description":"The identifier of the Project. Optionally use `-` as a wildcard if you don't want to specify \nthe identifier of the Project.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "$ref":"#/components/schemas/ProjectID"
        }
      },
      "OrganizationIDForPath":{
        "name":"organization",
        "in":"path",
        "description":"The identifier of the Organization.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "$ref":"#/components/schemas/OrganizationIDForPath"
        }
      },
      "DeviceID":{
        "name":"device",
        "in":"path",
        "description":"The identifier of the Device.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "$ref":"#/components/schemas/DeviceID"
        }
      },
      "SensorID":{
        "name":"sensor",
        "in":"path",
        "description":"The identifier of the Sensor.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "$ref":"#/components/schemas/SensorID"
        }
      },
      "LabelID":{
        "name":"label",
        "in":"path",
        "description":"The identifier of the Device Label.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "type":"string",
          "example":"LABEL_KEY"
        }
      },
      "DataConnectorID":{
        "name":"dataconnector",
        "in":"path",
        "description":"The identifier of the Data Connector.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "$ref":"#/components/schemas/DataConnectorID"
        }
      },
      "RoleID":{
        "name":"role",
        "in":"path",
        "description":"The identifier of the Role (eg. `project.admin`).\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "$ref":"#/components/schemas/RoleID"
        },
        "example":"project.admin"
      },
      "MemberID":{
        "name":"member",
        "in":"path",
        "description":"The identifier of the Member. This will be the same as the identifier of the User or\nService Account the Membership represents.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "type":"string"
        }
      },
      "ServiceAccountID":{
        "name":"serviceaccount",
        "in":"path",
        "description":"The identifier of the Service Account.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "type":"string"
        }
      },
      "ServiceAccountKeyID":{
        "name":"key",
        "in":"path",
        "description":"The identifier of the Service Account Key.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "type":"string"
        }
      },
      "OrganizationNameForBody":{
        "name":"organization",
        "in":"query",
        "description":"The resource name of the organization. Will be in the format: `organizations/{organization}`\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        },
        "example":"organizations/b8ntihoaplm0028st07g"
      },
      "OrganizationNameForQuery":{
        "name":"organization",
        "in":"query",
        "description":"If specified, only projects within the given Organization will be returned.\n\nMust be in the format `organizations/{organization}`\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "ListProjectQuery":{
        "name":"query",
        "in":"query",
        "description":"Used to search for the display name of both projects or organizations.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "ListDevicesQuery":{
        "name":"query",
        "in":"query",
        "description":"A general keyword-based search for Devices that searches for things like device type, labels, \nand identifiers. Does not provide any additional search capabilities compared to the other \nquery parameters of this request, but provides a mechanism for more general search queries, \nsuch as input from a user.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "DeviceIDList":{
        "name":"deviceIds",
        "in":"query",
        "description":"List of device identifiers to limit the query to a set of specific devices. Will default to all devices if not present.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"array",
          "items":{
            "$ref":"#/components/schemas/DeviceID"
          }
        }
      },
      "LabelFilter":{
        "name":"labelFilters",
        "in":"query",
        "description":"List of label filter expressions that filters the set of Devices for the results.\n\nEach expression takes the form `labelKey=labelValue`, or just `labelKey` if you only want\nto search for the presence of a label.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"array",
          "items":{
            "type":"string"
          }
        }
      },
      "EventTypeFilter":{
        "name":"eventTypes",
        "in":"query",
        "description":"List of event types to limit the results to. Will default to all event types if not present.\n\nHere's an overview of the available event types:\n\n| Event Type           | Event Details                                                                                                         |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| `touch`              | [Touch](https://developer.disruptive-technologies.com/docs/concepts/events#touch-event)                               |\n| `temperature`        | [Temperature](https://developer.disruptive-technologies.com/docs/concepts/events#temperature-event)                   |\n| `objectPresent`      | [Object Present](https://developer.disruptive-technologies.com/docs/concepts/events#object-present-event)             |\n| `humidity`           | [Humidity](https://developer.disruptive-technologies.com/docs/concepts/events#humidity-event)                         |\n| `objectPresentCount` | [Object-Present Count](https://developer.disruptive-technologies.com/docs/concepts/events#object-present-count-event) |\n| `touchCount`         | [Touch Count](https://developer.disruptive-technologies.com/docs/concepts/events#touch-count-event)                   |\n| `waterPresent`       | [Water Present](https://developer.disruptive-technologies.com/docs/concepts/events#water-present-event)               |\n| `co2`                | [CO2](https://developer.disruptive-technologies.com/docs/concepts/events#co2-event)                                   |\n| `pressure`           | [Pressure](https://developer.disruptive-technologies.com/docs/concepts/events#pressure-event)                         |\n| `motion`             | [Motion](https://developer.disruptive-technologies.com/docs/concepts/events#motion-event)                             |\n| `contact`            | [Contact](https://developer.disruptive-technologies.com/docs/concepts/events#contact-event)                           |\n| `probeWireStatus`    | [Probe Wire Status](https://developer.disruptive-technologies.com/docs/concepts/events#probe-wire-status-event)       |\n| `deskOccupancy`      | [Desk Occupancy](https://developer.disruptive-technologies.com/docs/concepts/events#desk-occupancy-event)             |\n| `networkStatus`      | [Network Status](https://developer.disruptive-technologies.com/docs/concepts/events#network-status-event)             |\n| `batteryStatus`      | [Battery Status](https://developer.disruptive-technologies.com/docs/concepts/events#battery-status-event)             |\n| `connectionStatus`   | [Connection Status](https://developer.disruptive-technologies.com/docs/concepts/events#connection-status-event)       |\n| `ethernetStatus`     | [Ethernet Status](https://developer.disruptive-technologies.com/docs/concepts/events#ethernet-status-event)           |\n| `cellularStatus`     | [Cellular Status](https://developer.disruptive-technologies.com/docs/concepts/events#cellular-status-event)           |\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"array",
          "items":{
            "$ref":"#/components/schemas/EventType"
          }
        }
      },
      "ProductNumberFilter":{
        "name":"productNumbers",
        "in":"query",
        "description":"List of product numbers to limit the results to. Will default to all product numbers if not present.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"array",
          "items":{
            "type":"string",
            "example":"102058"
          }
        }
      },
      "DeviceTypeFilter":{
        "name":"deviceTypes",
        "in":"query",
        "description":"List of device types to limit the results to. Will default to all Device types if not present.\n\nAvailable device types:\n| Device Type        | Device Details                                                                                                     |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------ |\n| `temperature`      | [Temperature](https://developer.disruptive-technologies.com/docs/concepts/devices#temperature-sensor)              |\n| `proximity`        | [Proximity](https://developer.disruptive-technologies.com/docs/concepts/devices#proximity-sensor)                  |\n| `touch`            | [Touch](https://developer.disruptive-technologies.com/docs/concepts/devices#touch-sensor)                          |\n| `humidity`         | [Humidity](https://developer.disruptive-technologies.com/docs/concepts/devices#humidity-sensor)                    |\n| `proximityCounter` | [Proximity Counter](https://developer.disruptive-technologies.com/docs/concepts/devices#counting-proximity-sensor) |\n| `touchCounter`     | [Touch Counter](https://developer.disruptive-technologies.com/docs/concepts/devices#counting-touch-sensor)         |\n| `waterDetector`    | [Water Detector](https://developer.disruptive-technologies.com/docs/concepts/devices#water-detector-sensor)        |\n| `co2`              | [CO2](https://developer.disruptive-technologies.com/docs/concepts/devices#co2-sensor)                              |\n| `motion`           | [Motion](https://developer.disruptive-technologies.com/docs/concepts/devices#motion-sensor)                        |\n| `contact`          | [Contact](https://developer.disruptive-technologies.com/docs/concepts/devices#contact-sensor)                      |\n| `deskOccupancy`    | [Desk Occupancy](https://developer.disruptive-technologies.com/docs/concepts/devices#desk-occupancy-sensor)        |\n| `ccon`             | [Cloud Connector](https://developer.disruptive-technologies.com/docs/concepts/devices#cloud-connector-details)     |\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"array",
          "items":{
            "type":"string",
            "enum":[
              "temperature",
              "touch",
              "proximity",
              "humidity",
              "touchCounter",
              "proximityCounter",
              "waterDetector",
              "co2",
              "motion",
              "contact",
              "deskOccupancy",
              "ccon"
            ]
          }
        }
      },
      "PageSize":{
        "name":"pageSize",
        "in":"query",
        "description":"Requested page size.\n\nMaximum page size is 100, which is also the default.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "maximum":100,
          "minimum":1,
          "type":"integer"
        }
      },
      "EventPageSize":{
        "name":"pageSize",
        "in":"query",
        "description":"Requested page size.\n\nMaximum page size is 1000, which is also the default.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "maximum":1000,
          "minimum":1,
          "type":"integer"
        }
      },
      "PageToken":{
        "name":"pageToken",
        "in":"query",
        "description":"A token identifying a page of results to return.\n\nShould be a `nextPageToken` value returned from a previous call. If not specified, the first page of results will be returned.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "StartTime":{
        "name":"startTime",
        "in":"query",
        "description":"The start of the time range to fetch events for. Defaults to 24h ago if not set, but can be \nset to as far back as 31 days ago. The value should be in the \n[RFC 3339](https://tools.ietf.org/html/rfc3339) format: `YYYY-MM-DDTHH:MM:SSZ`.\n\nThe `startTime` parameter will be rounded down to the nearest second backwards in time, and **will** include\nevents on this exact timestamp.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "EndTime":{
        "name":"endTime",
        "in":"query",
        "description":"The end of the time range to fetch events for. Defaults to now if not set. The value \nshould be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format: `YYYY-MM-DDTHH:MM:SSZ`.\n\nThe `endTime` parameter will be rounded up to the nearest second forwards in time, and **will not** \ninclude events on this exact timestamp.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "ClaimInfoIdentifier":{
        "name":"identifier",
        "in":"query",
        "description":"The identifier to get claim information for. This could either be the identifier of a kit or a device,\nand would typically be the result of scanning a QR code.\n",
        "required":true,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "ClaimInfoOrganization":{
        "name":"organization",
        "in":"query",
        "description":"The resource name of the organization that will claim the devices or kits.\n\nMust be in the format `organizations/{organization}`.\n",
        "required":false,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"string"
        }
      },
      "ClaimDryRun":{
        "name":"dryRun",
        "in":"query",
        "description":"When dry run is set to `true` for a claim request, the subscription for all the devices \nin the request will _not_ be started, and the devices will _not_ be added to the requested project. \nThis flag is useful during development to validate your implementation of this endpoint, without actually \nstarting subscriptions of devices. Remember to set it to `false` before deploying your code to production.\n",
        "required":true,
        "style":"form",
        "explode":true,
        "schema":{
          "type":"boolean"
        }
      },
      "ClaimDestinationProject":{
        "name":"project",
        "in":"path",
        "description":"The identifier of the project the devices should be claimed into.\n",
        "required":true,
        "style":"simple",
        "explode":false,
        "schema":{
          "type":"string"
        }
      }
    },
    "securitySchemes":{
      "UserLogin":{
        "type":"oauth2",
        "description":"Try the API by logging in to your DT Studio account.",
        "flows":{
          "authorizationCode":{
            "authorizationUrl":"https://identity.disruptive-technologies.com/openid/authorize",
            "tokenUrl":"https://identity.disruptive-technologies.com/openid/token",
            "scopes":{
            }
          }
        }
      },
      "ServiceAccountLogin":{
        "type":"http",
        "description":"Try the API using the KeyID and Secret of a Service Account.",
        "scheme":"basic"
      }
    }
  }
}
}

}
